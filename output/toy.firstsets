FIRST(Program) = { _bool, _string, _void, _id, _class, _double, _int, _interface }
FIRST(DeclList) = { _bool, _string, _void, _id, _class, _double, _int, _interface }
FIRST(Decl) = { _bool, _string, _id, _void, _class, _double, _int, _interface }
FIRST(FieldDecl) = { _bool, _string, _id, _double, _int }
FIRST(TypeAndIdentifier) = { _bool, _string, _id, _double, _int }
FIRST(SimpleType) = { _bool, _string, _double, _int }
FIRST(ArrayType) = { _leftbracket }
FIRST(BasicType) = { _bool, _string, _double, _int }
FIRST(Name) = { _id }
FIRST(SimpleName) = { _id }
FIRST(QualifiedName) = { _id }
FIRST(MethodDecl) = { _bool, _string, _void, _id, _double, _int }
FIRST(Prototype) = { _bool, _string, _id, _void, _double, _int }
FIRST(ArgumentListOpt) = { _bool, _string, _id, _double, _rightparen, _int }
FIRST(ArgumentList) = { _bool, _string, _id, _double, _int }
FIRST(Block) = { _leftbrace }
FIRST(FieldDeclListOpt) = { _not, _bool, _break, _semicolon, _double, _leftparen, _for, _if, _leftbrace, _rightbrace, _int, _newarray, _booleanliteral, _println, _integerliteral, _readln, _doubleliteral, _return, _stringliteral, _string, _id, _while, _minus }
FIRST(FieldDeclList) = { _bool, _string, _id, _double, _int }
FIRST(StatementListOpt) = { _not, _break, _semicolon, _leftparen, _for, _if, _leftbrace, _rightbrace, _newarray, _booleanliteral, _println, _integerliteral, _readln, _doubleliteral, _return, _stringliteral, _id, _while, _minus }
FIRST(StatementList) = { _not, _break, _semicolon, _leftparen, _for, _if, _leftbrace, _newarray, _booleanliteral, _println, _integerliteral, _readln, _doubleliteral, _return, _stringliteral, _id, _while, _minus }
FIRST(Statement) = { _not, _break, _semicolon, _leftparen, _for, _if, _leftbrace, _newarray, _booleanliteral, _integerliteral, _println, _readln, _doubleliteral, _stringliteral, _return, _id, _while, _minus }
FIRST(IfStatement) = { _if }
FIRST(ParExpression) = { _leftparen }
FIRST(ForStatement) = { _for }
FIRST(ForControl) = { _readln, _doubleliteral, _stringliteral, _not, _id, _semicolon, _minus, _leftparen, _newarray, _booleanliteral, _integerliteral }
FIRST(ForControl1) = { _semicolon }
FIRST(WhileStatement) = { _while }
FIRST(ReturnExpressionOpt) = { _readln, _doubleliteral, _stringliteral, _not, _id, _semicolon, _minus, _leftparen, _newarray, _booleanliteral, _integerliteral }
FIRST(ExpressionList) = { _readln, _doubleliteral, _stringliteral, _not, _id, _minus, _leftparen, _newarray, _booleanliteral, _integerliteral }
FIRST(ClassDecl) = { _class }
FIRST(Super) = { _extends, _implements, _leftbrace }
FIRST(Interfaces) = { _leftbrace, _implements }
FIRST(IdentifierList) = { _id }
FIRST(ClassBodyOpt) = { _bool, _string, _void, _id, _double, _rightbrace, _int }
FIRST(MemberList) = { _bool, _string, _void, _id, _double, _int }
FIRST(Member) = { _bool, _string, _id, _void, _double, _int }
FIRST(InterfaceDecl) = { _interface }
FIRST(PrototypeListOpt) = { _bool, _string, _void, _id, _double, _rightbrace, _int }
FIRST(PrototypeList) = { _bool, _string, _void, _id, _double, _int }
FIRST(PrototypeDecl) = { _bool, _string, _void, _id, _double, _int }
FIRST(Expression) = { _readln, _doubleliteral, _stringliteral, _not, _id, _minus, _leftparen, _newarray, _booleanliteral, _integerliteral }
FIRST(BinaryExpression) = { _readln, _doubleliteral, _stringliteral, _not, _id, _minus, _leftparen, _newarray, _booleanliteral, _integerliteral }
FIRST(UnaryExpression) = { _readln, _doubleliteral, _stringliteral, _not, _id, _minus, _leftparen, _newarray, _booleanliteral, _integerliteral }
FIRST(Primary) = { _doubleliteral, _readln, _stringliteral, _id, _leftparen, _booleanliteral, _newarray, _integerliteral }
FIRST(PrefixOperator) = { _not, _minus }
FIRST(InfixOperator) = { _and, _or, _plus, _minus, _multiplication, _division, _less, _lessequal, _greater, _greaterequal, _equal, _notequal }
FIRST(Literal) = { _doubleliteral, _stringliteral, _booleanliteral, _integerliteral }
FIRST(MethodCall) = { _id }
FIRST(MethodCall2) = { _id }
FIRST(IndexResolver) = { _leftbracket }
