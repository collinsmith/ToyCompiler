State 0: V[]
I:   Program → • DeclList                                                                             FOLLOW={ _eof } GOTO(S1, DeclList) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     Decl → • ClassDecl                                                                               FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S4, ClassDecl) 
     InterfaceDecl → • _interface _id _leftbrace PrototypeListOpt                                     FOLLOW={ _bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S5, _interface) SHIFT
     FieldDecl → • TypeAndIdentifier _semicolon                                                       FOLLOW={ _bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S6, TypeAndIdentifier) 
     Prototype → • TypeAndIdentifier _leftparen ArgumentListOpt                                       FOLLOW={ _leftbrace } GOTO(S6, TypeAndIdentifier) 
     DeclList → • DeclList Decl                                                                       FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S1, DeclList) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     MethodDecl → • Prototype Block                                                                   FOLLOW={ _bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S8, Prototype) 
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Decl → • FieldDecl                                                                               FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S11, FieldDecl) 
     Prototype → • _void _id _leftparen ArgumentListOpt                                               FOLLOW={ _leftbrace } GOTO(S12, _void) SHIFT
     Decl → • MethodDecl                                                                              FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S13, MethodDecl) 
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _semicolon,_leftparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     ClassDecl → • _class _id Super                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S16, _class) SHIFT
     DeclList → • Decl                                                                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S17, Decl) 
     Decl → • InterfaceDecl                                                                           FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S18, InterfaceDecl) 

State 1: V[DeclList] = goto(S0, 53)
I:   DeclList → DeclList • Decl                                                                       FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S19, Decl) 
I:   Program → DeclList •                                                                             FOLLOW={ _eof } REDUCE(0)
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     Decl → • ClassDecl                                                                               FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S4, ClassDecl) 
     InterfaceDecl → • _interface _id _leftbrace PrototypeListOpt                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S5, _interface) SHIFT
     FieldDecl → • TypeAndIdentifier _semicolon                                                       FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S6, TypeAndIdentifier) 
     Prototype → • TypeAndIdentifier _leftparen ArgumentListOpt                                       FOLLOW={ _leftbrace } GOTO(S6, TypeAndIdentifier) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     MethodDecl → • Prototype Block                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S8, Prototype) 
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Decl → • FieldDecl                                                                               FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S11, FieldDecl) 
     Prototype → • _void _id _leftparen ArgumentListOpt                                               FOLLOW={ _leftbrace } GOTO(S12, _void) SHIFT
     Decl → • MethodDecl                                                                              FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S13, MethodDecl) 
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _semicolon,_leftparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     ClassDecl → • _class _id Super                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S16, _class) SHIFT
     Decl → • InterfaceDecl                                                                           FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S18, InterfaceDecl) 

State 2: V[_bool] = goto(S0, 2)
I:   SimpleType → _bool •                                                                             FOLLOW={ _id,_rightparen,_leftbracket } REDUCE(13)

State 3: V[Type] = goto(S0, 57)
I:   Type → Type • _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S25, _leftbracket) SHIFT
I:   TypeAndIdentifier → Type • _id                                                                   FOLLOW={ _semicolon,_comma,_leftparen,_rightparen } GOTO(S26, _id) SHIFT

State 4: V[ClassDecl] = goto(S0, 78)
I:   Decl → ClassDecl •                                                                               FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(4)

State 5: V[_interface] = goto(S0, 13)
I:   InterfaceDecl → _interface • _id _leftbrace PrototypeListOpt                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S20, _id) SHIFT

State 6: V[TypeAndIdentifier] = goto(S0, 56)
I:   Prototype → TypeAndIdentifier • _leftparen ArgumentListOpt                                       FOLLOW={ _leftbrace } GOTO(S22, _leftparen) SHIFT
I:   FieldDecl → TypeAndIdentifier • _semicolon                                                       FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface } GOTO(S21, _semicolon) SHIFT

State 7: V[_double] = goto(S0, 6)
I:   SimpleType → _double •                                                                           FOLLOW={ _id,_rightparen,_leftbracket } REDUCE(14)

State 8: V[Prototype] = goto(S0, 61)
I:   MethodDecl → Prototype • Block                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface } GOTO(S24, Block) 
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface } GOTO(S23, _leftbrace) SHIFT

State 9: V[_string] = goto(S0, 18)
I:   SimpleType → _string •                                                                           FOLLOW={ _id,_rightparen,_leftbracket } REDUCE(15)

State 10: V[_id] = goto(S0, 51)
I:   Type → _id •                                                                                     FOLLOW={ _id,_rightparen,_leftbracket } REDUCE(11)

State 11: V[FieldDecl] = goto(S0, 55)
I:   Decl → FieldDecl •                                                                               FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(3)

State 12: V[_void] = goto(S0, 19)
I:   Prototype → _void • _id _leftparen ArgumentListOpt                                               FOLLOW={ _semicolon,_leftbrace } GOTO(S27, _id) SHIFT

State 13: V[MethodDecl] = goto(S0, 60)
I:   Decl → MethodDecl •                                                                              FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(5)

State 14: V[_int] = goto(S0, 12)
I:   SimpleType → _int •                                                                              FOLLOW={ _id,_rightparen,_leftbracket } REDUCE(12)

State 15: V[SimpleType] = goto(S0, 58)
I:   Type → SimpleType •                                                                              FOLLOW={ _id,_rightparen,_leftbracket } REDUCE(10)

State 16: V[_class] = goto(S0, 4)
I:   ClassDecl → _class • _id Super                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S28, _id) SHIFT

State 17: V[Decl] = goto(S0, 54)
I:   DeclList → Decl •                                                                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(1)

State 18: V[InterfaceDecl] = goto(S0, 85)
I:   Decl → InterfaceDecl •                                                                           FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(6)

State 19: V[DeclList, Decl] = goto(S1, 54)
I:   DeclList → DeclList Decl •                                                                       FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(2)

State 20: V[_interface, _id] = goto(S5, 51)
I:   InterfaceDecl → _interface _id • _leftbrace PrototypeListOpt                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S29, _leftbrace) SHIFT

State 21: V[TypeAndIdentifier, _semicolon] = goto(S6, 36)
I:   FieldDecl → TypeAndIdentifier _semicolon •                                                       FOLLOW={ _eof,_bool,_break,_class,_double,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } REDUCE(7)

State 22: V[TypeAndIdentifier, _leftparen] = goto(S6, 39)
I:   Prototype → TypeAndIdentifier _leftparen • ArgumentListOpt                                       FOLLOW={ _semicolon,_leftbrace } GOTO(S30, ArgumentListOpt) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     ArgumentList → • ArgumentList _comma TypeAndIdentifier                                           FOLLOW={ _comma,_rightparen } GOTO(S31, ArgumentList) 
     ArgumentListOpt → • _rightparen                                                                  FOLLOW={ _semicolon,_leftbrace } GOTO(S32, _rightparen) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     ArgumentListOpt → • ArgumentList _rightparen                                                     FOLLOW={ _semicolon,_leftbrace } GOTO(S31, ArgumentList) 
     ArgumentList → • TypeAndIdentifier                                                               FOLLOW={ _comma,_rightparen } GOTO(S33, TypeAndIdentifier) 
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _comma,_rightparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT

State 23: V[Prototype, _leftbrace] = goto(S8, 43)
I:   Block → _leftbrace • FieldDeclListOpt                                                            FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S34, FieldDeclListOpt) 
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S23, _leftbrace) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     Statement → • _println _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S70, _println) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     FieldDecl → • TypeAndIdentifier _semicolon                                                       FOLLOW={ _bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } GOTO(S67, TypeAndIdentifier) 
     FieldDeclListOpt → • FieldDeclList StatementListOpt                                              FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S66, FieldDeclList) 
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S65, _id) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Statement → • _semicolon                                                                         FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S62, _semicolon) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     Statement → • Expression _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S59, Expression) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     FieldDeclList → • FieldDeclList FieldDecl                                                        FOLLOW={ _not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } GOTO(S66, FieldDeclList) 
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     FieldDeclListOpt → • StatementListOpt                                                            FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S57, StatementListOpt) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S65, _id) SHIFT
     Statement → • Block                                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S54, Block) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     StatementListOpt → • StatementList _rightbrace                                                   FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S52, StatementList) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _semicolon } GOTO(S3, Type) 
     Statement → • ForStatement                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S50, ForStatement) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S65, _id) SHIFT
     FieldDeclList → • FieldDecl                                                                      FOLLOW={ _bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } GOTO(S49, FieldDecl) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     StatementList → • StatementList Statement                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S52, StatementList) 
     IfStatement → • _if ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     IfStatement → • _if ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Statement → • WhileStatement                                                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S44, WhileStatement) 
     StatementListOpt → • _rightbrace                                                                 FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S43, _rightbrace) SHIFT
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     WhileStatement → • _while ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S41, _while) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Statement → • _return ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S39, _return) SHIFT
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     Statement → • _break _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S38, _break) SHIFT
     Statement → • IfStatement                                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S37, IfStatement) 
     StatementList → • Statement                                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S36, Statement) 
     ForStatement → • _for _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S35, _for) SHIFT
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S65, _id) SHIFT

State 24: V[Prototype, Block] = goto(S8, 64)
I:   MethodDecl → Prototype Block •                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface } REDUCE(18)

State 25: V[Type, _leftbracket] = goto(S3, 41)
I:   Type → Type _leftbracket • _rightbracket                                                         FOLLOW={ _id,_rightparen,_leftbracket } GOTO(S72, _rightbracket) SHIFT

State 26: V[Type, _id] = goto(S3, 51)
I:   TypeAndIdentifier → Type _id •                                                                   FOLLOW={ _semicolon,_comma,_leftparen,_rightparen } REDUCE(8)

State 27: V[_void, _id] = goto(S12, 51)
I:   Prototype → _void _id • _leftparen ArgumentListOpt                                               FOLLOW={ _semicolon,_leftbrace } GOTO(S73, _leftparen) SHIFT

State 28: V[_class, _id] = goto(S16, 51)
I:   ClassDecl → _class _id • Super                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S74, Super) 
     Super → • _extends _id Interfaces                                                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S75, _extends) SHIFT
     Super → • Interfaces                                                                             FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S76, Interfaces) 
     Interfaces → • _leftbrace ClassBodyOpt                                                           FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S77, _leftbrace) SHIFT
     Interfaces → • _implements IdentifierList _leftbrace ClassBodyOpt                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S78, _implements) SHIFT

State 29: V[_interface, _id, _leftbrace] = goto(S20, 43)
I:   InterfaceDecl → _interface _id _leftbrace • PrototypeListOpt                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S79, PrototypeListOpt) 
     PrototypeList → • PrototypeDecl                                                                  FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S80, PrototypeDecl) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     Prototype → • TypeAndIdentifier _leftparen ArgumentListOpt                                       FOLLOW={ _semicolon } GOTO(S81, TypeAndIdentifier) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     PrototypeListOpt → • PrototypeList _rightbrace                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S82, PrototypeList) 
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     PrototypeDecl → • Prototype _semicolon                                                           FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S83, Prototype) 
     Prototype → • _void _id _leftparen ArgumentListOpt                                               FOLLOW={ _semicolon } GOTO(S12, _void) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     PrototypeListOpt → • _rightbrace                                                                 FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S87, _rightbrace) SHIFT
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _leftparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     PrototypeList → • PrototypeList PrototypeDecl                                                    FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S82, PrototypeList) 

State 30: V[TypeAndIdentifier, _leftparen, ArgumentListOpt] = goto(S22, 62)
I:   Prototype → TypeAndIdentifier _leftparen ArgumentListOpt •                                       FOLLOW={ _semicolon,_leftbrace } REDUCE(19)

State 31: V[TypeAndIdentifier, _leftparen, ArgumentList] = goto(S22, 63)
I:   ArgumentList → ArgumentList • _comma TypeAndIdentifier                                           FOLLOW={ _comma,_rightparen } GOTO(S85, _comma) SHIFT
I:   ArgumentListOpt → ArgumentList • _rightparen                                                     FOLLOW={ _semicolon,_leftbrace } GOTO(S84, _rightparen) SHIFT

State 32: V[TypeAndIdentifier, _leftparen, _rightparen] = goto(S22, 40)
I:   ArgumentListOpt → _rightparen •                                                                  FOLLOW={ _semicolon,_leftbrace } REDUCE(21)

State 33: V[TypeAndIdentifier, _leftparen, TypeAndIdentifier] = goto(S22, 56)
I:   ArgumentList → TypeAndIdentifier •                                                               FOLLOW={ _comma,_rightparen } REDUCE(23)

State 34: V[Prototype, _leftbrace, FieldDeclListOpt] = goto(S23, 65)
I:   Block → _leftbrace FieldDeclListOpt •                                                            FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } REDUCE(25)

State 35: V[Prototype, _leftbrace, _for] = goto(S23, 9)
I:   ForStatement → _for • _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S88, _leftparen) SHIFT

State 36: V[Prototype, _leftbrace, Statement] = goto(S23, 69)
I:   StatementList → Statement •                                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(32)

State 37: V[Prototype, _leftbrace, IfStatement] = goto(S23, 70)
I:   Statement → IfStatement •                                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(37)

State 38: V[Prototype, _leftbrace, _break] = goto(S23, 3)
I:   Statement → _break • _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S89, _semicolon) SHIFT

State 39: V[Prototype, _leftbrace, _return] = goto(S23, 17)
I:   Statement → _return • ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S90, ReturnExpressionOpt) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     ReturnExpressionOpt → • _semicolon                                                               FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S92, _semicolon) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     ReturnExpressionOpt → • Expression _semicolon                                                    FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S93, Expression) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 40: V[Prototype, _leftbrace, _doubleliteral] = goto(S23, 48)
I:   Literal → _doubleliteral •                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(103)

State 41: V[Prototype, _leftbrace, _while] = goto(S23, 20)
I:   WhileStatement → _while • ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S94, ParExpression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S71, _leftparen) SHIFT

State 42: V[Prototype, _leftbrace, _not] = goto(S23, 34)
I:   PrefixOperator → _not •                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(89)

State 43: V[Prototype, _leftbrace, _rightbrace] = goto(S23, 44)
I:   StatementListOpt → _rightbrace •                                                                 FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } REDUCE(30)

State 44: V[Prototype, _leftbrace, WhileStatement] = goto(S23, 75)
I:   Statement → WhileStatement •                                                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(40)

State 45: V[Prototype, _leftbrace, Literal] = goto(S23, 95)
I:   Primary → Literal •                                                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(84)

State 46: V[Prototype, _leftbrace, _if] = goto(S23, 10)
I:   IfStatement → _if • ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S119, ParExpression) 
I:   IfStatement → _if • ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S119, ParExpression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S71, _leftparen) SHIFT

State 47: V[Prototype, _leftbrace, _stringliteral] = goto(S23, 49)
I:   Literal → _stringliteral •                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(104)

State 48: V[Prototype, _leftbrace, _minus] = goto(S23, 22)
I:   PrefixOperator → _minus •                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(90)

State 49: V[Prototype, _leftbrace, FieldDecl] = goto(S23, 55)
I:   FieldDeclList → FieldDecl •                                                                      FOLLOW={ _bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } REDUCE(28)

State 50: V[Prototype, _leftbrace, ForStatement] = goto(S23, 72)
I:   Statement → ForStatement •                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(39)

State 51: V[Prototype, _leftbrace, ParExpression] = goto(S23, 71)
I:   Primary → ParExpression •                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(86)

State 52: V[Prototype, _leftbrace, StatementList] = goto(S23, 68)
I:   StatementList → StatementList • Statement                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S120, Statement) 
I:   StatementListOpt → StatementList • _rightbrace                                                   FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S121, _rightbrace) SHIFT
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S23, _leftbrace) SHIFT
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Statement → • _println _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S70, _println) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     IfStatement → • _if ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Statement → • _semicolon                                                                         FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S62, _semicolon) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     IfStatement → • _if ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Statement → • WhileStatement                                                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S44, WhileStatement) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     Statement → • Expression _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S59, Expression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     WhileStatement → • _while ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S41, _while) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Statement → • _return ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S39, _return) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     Statement → • Block                                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S54, Block) 
     Statement → • _break _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S38, _break) SHIFT
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Statement → • IfStatement                                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S37, IfStatement) 
     ForStatement → • _for _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S35, _for) SHIFT
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Statement → • ForStatement                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S50, ForStatement) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 53: V[Prototype, _leftbrace, PrefixOperator] = goto(S23, 93)
I:   UnaryExpression → PrefixOperator • UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S118, UnaryExpression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S96, Name) 
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S96, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S96, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Name → • _id                                                                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 54: V[Prototype, _leftbrace, Block] = goto(S23, 64)
I:   Statement → Block •                                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(35)

State 55: V[Prototype, _leftbrace, MethodCall] = goto(S23, 96)
I:   Primary → MethodCall •                                                                           FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(85)
I:   MethodCall → MethodCall • _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S97, _period) SHIFT
I:   MethodCall → MethodCall • _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S97, _period) SHIFT

State 56: V[Prototype, _leftbrace, _booleanliteral] = goto(S23, 46)
I:   Literal → _booleanliteral •                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(106)

State 57: V[Prototype, _leftbrace, StatementListOpt] = goto(S23, 67)
I:   FieldDeclListOpt → StatementListOpt •                                                            FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } REDUCE(26)

State 58: V[Prototype, _leftbrace, _newarray] = goto(S23, 14)
I:   Primary → _newarray • _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S98, _leftparen) SHIFT

State 59: V[Prototype, _leftbrace, Expression] = goto(S23, 89)
I:   Statement → Expression • _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S122, _semicolon) SHIFT

State 60: V[Prototype, _leftbrace, Primary] = goto(S23, 92)
I:   UnaryExpression → Primary •                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(81)

State 61: V[Prototype, _leftbrace, UnaryExpression] = goto(S23, 91)
I:   BinaryExpression → UnaryExpression •                                                             FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(79)

State 62: V[Prototype, _leftbrace, _semicolon] = goto(S23, 36)
I:   Statement → _semicolon •                                                                         FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(34)

State 63: V[Prototype, _leftbrace, _readln] = goto(S23, 16)
I:   Primary → _readln • _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S95, _leftparen) SHIFT

State 64: V[Prototype, _leftbrace, _integerliteral] = goto(S23, 47)
I:   Literal → _integerliteral •                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(105)

State 65: V[Prototype, _leftbrace, _id] = goto(S23, 51)
I:   Type → _id •                                                                                     FOLLOW={ _id,_leftbracket } REDUCE(11)
I:   MethodCall → _id • _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S99, _leftparen) SHIFT
I:   MethodCall → _id • _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S99, _leftparen) SHIFT
I:   Name → _id •                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(16)

State 66: V[Prototype, _leftbrace, FieldDeclList] = goto(S23, 66)
I:   FieldDeclList → FieldDeclList • FieldDecl                                                        FOLLOW={ _not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } GOTO(S123, FieldDecl) 
I:   FieldDeclListOpt → FieldDeclList • StatementListOpt                                              FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S124, StatementListOpt) 
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S23, _leftbrace) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     Statement → • _println _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S70, _println) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     FieldDecl → • TypeAndIdentifier _semicolon                                                       FOLLOW={ _not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } GOTO(S67, TypeAndIdentifier) 
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S65, _id) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     Statement → • _semicolon                                                                         FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S62, _semicolon) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     Statement → • Expression _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S59, Expression) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S65, _id) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Statement → • Block                                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S54, Block) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     StatementListOpt → • StatementList _rightbrace                                                   FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S52, StatementList) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _semicolon } GOTO(S3, Type) 
     Statement → • ForStatement                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S50, ForStatement) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S65, _id) SHIFT
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     StatementList → • StatementList Statement                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S52, StatementList) 
     IfStatement → • _if ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     IfStatement → • _if ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Statement → • WhileStatement                                                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S44, WhileStatement) 
     StatementListOpt → • _rightbrace                                                                 FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S43, _rightbrace) SHIFT
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     WhileStatement → • _while ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S41, _while) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Statement → • _return ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S39, _return) SHIFT
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     Statement → • _break _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S38, _break) SHIFT
     Statement → • IfStatement                                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S37, IfStatement) 
     StatementList → • Statement                                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S36, Statement) 
     ForStatement → • _for _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S35, _for) SHIFT
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S65, _id) SHIFT

State 67: V[Prototype, _leftbrace, TypeAndIdentifier] = goto(S23, 56)
I:   FieldDecl → TypeAndIdentifier • _semicolon                                                       FOLLOW={ _bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } GOTO(S21, _semicolon) SHIFT

State 68: V[Prototype, _leftbrace, Name] = goto(S23, 59)
I:   Name → Name • _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S103, _period) SHIFT
I:   Expression → Name • IndexResolver _assignop Expression                                           FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S102, IndexResolver) 
I:   Primary → Name •                                                                                 FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(82)
I:   Primary → Name • IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S102, IndexResolver) 
I:   Expression → Name • _assignop Expression                                                         FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S101, _assignop) SHIFT
     IndexResolver → • IndexResolver _leftbracket Expression _rightbracket                            FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S102, IndexResolver) 
     IndexResolver → • _leftbracket Expression _rightbracket                                          FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S100, _leftbracket) SHIFT

State 69: V[Prototype, _leftbrace, BinaryExpression] = goto(S23, 90)
I:   Expression → BinaryExpression •                                                                  FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } REDUCE(77)
I:   BinaryExpression → BinaryExpression • InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S116, InfixOperator) 
     InfixOperator → • _equal                                                                         FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S115, _equal) SHIFT
     InfixOperator → • _greaterequal                                                                  FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S114, _greaterequal) SHIFT
     InfixOperator → • _greater                                                                       FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S113, _greater) SHIFT
     InfixOperator → • _lessequal                                                                     FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S112, _lessequal) SHIFT
     InfixOperator → • _less                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S111, _less) SHIFT
     InfixOperator → • _division                                                                      FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S110, _division) SHIFT
     InfixOperator → • _multiplication                                                                FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S109, _multiplication) SHIFT
     InfixOperator → • _minus                                                                         FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S108, _minus) SHIFT
     InfixOperator → • _plus                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S107, _plus) SHIFT
     InfixOperator → • _or                                                                            FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S106, _or) SHIFT
     InfixOperator → • _and                                                                           FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S105, _and) SHIFT
     InfixOperator → • _notequal                                                                      FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S104, _notequal) SHIFT

State 70: V[Prototype, _leftbrace, _println] = goto(S23, 15)
I:   Statement → _println • _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S125, _leftparen) SHIFT

State 71: V[Prototype, _leftbrace, _leftparen] = goto(S23, 39)
I:   ParExpression → _leftparen • Expression _rightparen                                              FOLLOW={ _break,_for,_if,_newarray,_println,_readln,_return,_while,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal,_and,_or,_not,_semicolon,_comma,_leftparen,_rightparen,_rightbracket,_leftbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S117, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _rightparen } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _rightparen } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _rightparen } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 72: V[Type, _leftbracket, _rightbracket] = goto(S25, 42)
I:   Type → Type _leftbracket _rightbracket •                                                         FOLLOW={ _id,_rightparen,_leftbracket } REDUCE(9)

State 73: V[_void, _id, _leftparen] = goto(S27, 39)
I:   Prototype → _void _id _leftparen • ArgumentListOpt                                               FOLLOW={ _semicolon,_leftbrace } GOTO(S86, ArgumentListOpt) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     ArgumentList → • ArgumentList _comma TypeAndIdentifier                                           FOLLOW={ _comma,_rightparen } GOTO(S31, ArgumentList) 
     ArgumentListOpt → • _rightparen                                                                  FOLLOW={ _semicolon,_leftbrace } GOTO(S32, _rightparen) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     ArgumentListOpt → • ArgumentList _rightparen                                                     FOLLOW={ _semicolon,_leftbrace } GOTO(S31, ArgumentList) 
     ArgumentList → • TypeAndIdentifier                                                               FOLLOW={ _comma,_rightparen } GOTO(S33, TypeAndIdentifier) 
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _comma,_rightparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT

State 74: V[_class, _id, Super] = goto(S28, 79)
I:   ClassDecl → _class _id Super •                                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(56)

State 75: V[_class, _id, _extends] = goto(S28, 8)
I:   Super → _extends • _id Interfaces                                                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S126, _id) SHIFT

State 76: V[_class, _id, Interfaces] = goto(S28, 80)
I:   Super → Interfaces •                                                                             FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(57)

State 77: V[_class, _id, _leftbrace] = goto(S28, 43)
I:   Interfaces → _leftbrace • ClassBodyOpt                                                           FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S127, ClassBodyOpt) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     Member → • MethodDecl                                                                            FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S128, MethodDecl) 
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     FieldDecl → • TypeAndIdentifier _semicolon                                                       FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S6, TypeAndIdentifier) 
     Prototype → • TypeAndIdentifier _leftparen ArgumentListOpt                                       FOLLOW={ _leftbrace } GOTO(S6, TypeAndIdentifier) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     ClassBodyOpt → • MemberList _rightbrace                                                          FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S129, MemberList) 
     Member → • FieldDecl                                                                             FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S130, FieldDecl) 
     MemberList → • Member                                                                            FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S131, Member) 
     MethodDecl → • Prototype Block                                                                   FOLLOW={ _bool,_string,_id,_void,_double,_int } GOTO(S8, Prototype) 
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Prototype → • _void _id _leftparen ArgumentListOpt                                               FOLLOW={ _leftbrace } GOTO(S12, _void) SHIFT
     ClassBodyOpt → • _rightbrace                                                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S132, _rightbrace) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _semicolon,_leftparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     MemberList → • MemberList Member                                                                 FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S129, MemberList) 

State 78: V[_class, _id, _implements] = goto(S28, 11)
I:   Interfaces → _implements • IdentifierList _leftbrace ClassBodyOpt                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S133, IdentifierList) 
     IdentifierList → • IdentifierList _comma _id                                                     FOLLOW={ _comma,_leftbrace } GOTO(S133, IdentifierList) 
     IdentifierList → • _id                                                                           FOLLOW={ _comma,_leftbrace } GOTO(S134, _id) SHIFT

State 79: V[_interface, _id, _leftbrace, PrototypeListOpt] = goto(S29, 86)
I:   InterfaceDecl → _interface _id _leftbrace PrototypeListOpt •                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(69)

State 80: V[_interface, _id, _leftbrace, PrototypeDecl] = goto(S29, 88)
I:   PrototypeList → PrototypeDecl •                                                                  FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } REDUCE(72)

State 81: V[_interface, _id, _leftbrace, TypeAndIdentifier] = goto(S29, 56)
I:   Prototype → TypeAndIdentifier • _leftparen ArgumentListOpt                                       FOLLOW={ _semicolon } GOTO(S22, _leftparen) SHIFT

State 82: V[_interface, _id, _leftbrace, PrototypeList] = goto(S29, 87)
I:   PrototypeList → PrototypeList • PrototypeDecl                                                    FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S135, PrototypeDecl) 
I:   PrototypeListOpt → PrototypeList • _rightbrace                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S136, _rightbrace) SHIFT
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     PrototypeDecl → • Prototype _semicolon                                                           FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S83, Prototype) 
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     Prototype → • _void _id _leftparen ArgumentListOpt                                               FOLLOW={ _semicolon } GOTO(S12, _void) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     Prototype → • TypeAndIdentifier _leftparen ArgumentListOpt                                       FOLLOW={ _semicolon } GOTO(S81, TypeAndIdentifier) 
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _leftparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT

State 83: V[_interface, _id, _leftbrace, Prototype] = goto(S29, 61)
I:   PrototypeDecl → Prototype • _semicolon                                                           FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S137, _semicolon) SHIFT

State 84: V[TypeAndIdentifier, _leftparen, ArgumentList, _rightparen] = goto(S31, 40)
I:   ArgumentListOpt → ArgumentList _rightparen •                                                     FOLLOW={ _semicolon,_leftbrace } REDUCE(22)

State 85: V[TypeAndIdentifier, _leftparen, ArgumentList, _comma] = goto(S31, 37)
I:   ArgumentList → ArgumentList _comma • TypeAndIdentifier                                           FOLLOW={ _comma,_rightparen } GOTO(S138, TypeAndIdentifier) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _comma,_rightparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT

State 86: V[_void, _id, _leftparen, ArgumentListOpt] = goto(S73, 62)
I:   Prototype → _void _id _leftparen ArgumentListOpt •                                               FOLLOW={ _semicolon,_leftbrace } REDUCE(20)

State 87: V[_interface, _id, _leftbrace, _rightbrace] = goto(S29, 44)
I:   PrototypeListOpt → _rightbrace •                                                                 FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(70)

State 88: V[Prototype, _leftbrace, _for, _leftparen] = goto(S35, 39)
I:   ForStatement → _for _leftparen • ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S139, ForControl) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     ForControl1 → • _semicolon Expression _semicolon _rightparen                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S140, _semicolon) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     ForControl → • Expression ForControl1                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S141, Expression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     ForControl1 → • _semicolon Expression _semicolon Expression _rightparen                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S140, _semicolon) SHIFT
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     ForControl → • ForControl1                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S142, ForControl1) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 89: V[Prototype, _leftbrace, _break, _semicolon] = goto(S38, 36)
I:   Statement → _break _semicolon •                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(36)

State 90: V[Prototype, _leftbrace, _return, ReturnExpressionOpt] = goto(S39, 76)
I:   Statement → _return ReturnExpressionOpt •                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(41)

State 91: V[Prototype, _leftbrace, _return, _id] = goto(S39, 51)
I:   MethodCall → _id • _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S99, _leftparen) SHIFT
I:   MethodCall → _id • _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S99, _leftparen) SHIFT
I:   Name → _id •                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(16)

State 92: V[Prototype, _leftbrace, _return, _semicolon] = goto(S39, 36)
I:   ReturnExpressionOpt → _semicolon •                                                               FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(52)

State 93: V[Prototype, _leftbrace, _return, Expression] = goto(S39, 89)
I:   ReturnExpressionOpt → Expression • _semicolon                                                    FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S143, _semicolon) SHIFT

State 94: V[Prototype, _leftbrace, _while, ParExpression] = goto(S41, 71)
I:   WhileStatement → _while ParExpression • Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S144, Statement) 
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S23, _leftbrace) SHIFT
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Statement → • _println _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S70, _println) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     IfStatement → • _if ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Statement → • _semicolon                                                                         FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S62, _semicolon) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     IfStatement → • _if ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Statement → • WhileStatement                                                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S44, WhileStatement) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     Statement → • Expression _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S59, Expression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     WhileStatement → • _while ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S41, _while) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Statement → • _return ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S39, _return) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     Statement → • Block                                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S54, Block) 
     Statement → • _break _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S38, _break) SHIFT
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Statement → • IfStatement                                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S37, IfStatement) 
     ForStatement → • _for _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S35, _for) SHIFT
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Statement → • ForStatement                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S50, ForStatement) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 95: V[Prototype, _leftbrace, _readln, _leftparen] = goto(S63, 39)
I:   Primary → _readln _leftparen • _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S145, _rightparen) SHIFT

State 96: V[Prototype, _leftbrace, PrefixOperator, Name] = goto(S53, 59)
I:   Name → Name • _period _id                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S103, _period) SHIFT
I:   Primary → Name •                                                                                 FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(82)
I:   Primary → Name • IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S146, IndexResolver) 
     IndexResolver → • IndexResolver _leftbracket Expression _rightbracket                            FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S146, IndexResolver) 
     IndexResolver → • _leftbracket Expression _rightbracket                                          FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S100, _leftbracket) SHIFT

State 97: V[Prototype, _leftbrace, MethodCall, _period] = goto(S55, 38)
I:   MethodCall → MethodCall _period • _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S147, _id) SHIFT
I:   MethodCall → MethodCall _period • _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S147, _id) SHIFT

State 98: V[Prototype, _leftbrace, _newarray, _leftparen] = goto(S58, 39)
I:   Primary → _newarray _leftparen • _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S148, _integerliteral) SHIFT

State 99: V[Prototype, _leftbrace, _return, _id, _leftparen] = goto(S91, 39)
I:   MethodCall → _id _leftparen • ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S149, ExpressionList) 
I:   MethodCall → _id _leftparen • _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S150, _rightparen) SHIFT
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _comma,_rightparen } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     ExpressionList → • Expression                                                                    FOLLOW={ _comma,_rightparen } GOTO(S153, Expression) 
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     ExpressionList → • ExpressionList _comma Expression                                              FOLLOW={ _comma,_rightparen } GOTO(S149, ExpressionList) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 100: V[Prototype, _leftbrace, Name, _leftbracket] = goto(S68, 41)
I:   IndexResolver → _leftbracket • Expression _rightbracket                                          FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S165, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _rightbracket } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _rightbracket } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _rightbracket } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 101: V[Prototype, _leftbrace, Name, _assignop] = goto(S68, 35)
I:   Expression → Name _assignop • Expression                                                         FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S158, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 102: V[Prototype, _leftbrace, Name, IndexResolver] = goto(S68, 97)
I:   IndexResolver → IndexResolver • _leftbracket Expression _rightbracket                            FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S160, _leftbracket) SHIFT
I:   Expression → Name IndexResolver • _assignop Expression                                           FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S159, _assignop) SHIFT
I:   Primary → Name IndexResolver •                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(83)

State 103: V[Prototype, _leftbrace, Name, _period] = goto(S68, 38)
I:   Name → Name _period • _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S161, _id) SHIFT

State 104: V[Prototype, _leftbrace, BinaryExpression, _notequal] = goto(S69, 31)
I:   InfixOperator → _notequal •                                                                      FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(94)

State 105: V[Prototype, _leftbrace, BinaryExpression, _and] = goto(S69, 32)
I:   InfixOperator → _and •                                                                           FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(92)

State 106: V[Prototype, _leftbrace, BinaryExpression, _or] = goto(S69, 33)
I:   InfixOperator → _or •                                                                            FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(91)

State 107: V[Prototype, _leftbrace, BinaryExpression, _plus] = goto(S69, 21)
I:   InfixOperator → _plus •                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(99)

State 108: V[Prototype, _leftbrace, BinaryExpression, _minus] = goto(S69, 22)
I:   InfixOperator → _minus •                                                                         FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(100)

State 109: V[Prototype, _leftbrace, BinaryExpression, _multiplication] = goto(S69, 23)
I:   InfixOperator → _multiplication •                                                                FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(101)

State 110: V[Prototype, _leftbrace, BinaryExpression, _division] = goto(S69, 24)
I:   InfixOperator → _division •                                                                      FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(102)

State 111: V[Prototype, _leftbrace, BinaryExpression, _less] = goto(S69, 26)
I:   InfixOperator → _less •                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(95)

State 112: V[Prototype, _leftbrace, BinaryExpression, _lessequal] = goto(S69, 27)
I:   InfixOperator → _lessequal •                                                                     FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(97)

State 113: V[Prototype, _leftbrace, BinaryExpression, _greater] = goto(S69, 28)
I:   InfixOperator → _greater •                                                                       FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(96)

State 114: V[Prototype, _leftbrace, BinaryExpression, _greaterequal] = goto(S69, 29)
I:   InfixOperator → _greaterequal •                                                                  FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(98)

State 115: V[Prototype, _leftbrace, BinaryExpression, _equal] = goto(S69, 30)
I:   InfixOperator → _equal •                                                                         FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } REDUCE(93)

State 116: V[Prototype, _leftbrace, BinaryExpression, InfixOperator] = goto(S69, 94)
I:   BinaryExpression → BinaryExpression InfixOperator • UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S164, UnaryExpression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S96, Name) 
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S96, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S96, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Name → • _id                                                                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 117: V[Prototype, _leftbrace, _leftparen, Expression] = goto(S71, 89)
I:   ParExpression → _leftparen Expression • _rightparen                                              FOLLOW={ _break,_for,_if,_newarray,_println,_readln,_return,_while,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal,_and,_or,_not,_semicolon,_comma,_leftparen,_rightparen,_rightbracket,_leftbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } GOTO(S155, _rightparen) SHIFT

State 118: V[Prototype, _leftbrace, PrefixOperator, UnaryExpression] = goto(S53, 91)
I:   UnaryExpression → PrefixOperator UnaryExpression •                                               FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(80)

State 119: V[Prototype, _leftbrace, _if, ParExpression] = goto(S46, 71)
I:   IfStatement → _if ParExpression • Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S166, Statement) 
I:   IfStatement → _if ParExpression • Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S166, Statement) 
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S23, _leftbrace) SHIFT
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Statement → • _println _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S70, _println) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     IfStatement → • _if ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Statement → • _semicolon                                                                         FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S62, _semicolon) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     IfStatement → • _if ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Statement → • WhileStatement                                                                     FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S44, WhileStatement) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     Statement → • Expression _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S59, Expression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     WhileStatement → • _while ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S41, _while) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Statement → • _return ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S39, _return) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     Statement → • Block                                                                              FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S54, Block) 
     Statement → • _break _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S38, _break) SHIFT
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Statement → • IfStatement                                                                        FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S37, IfStatement) 
     ForStatement → • _for _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S35, _for) SHIFT
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Statement → • ForStatement                                                                       FOLLOW={ _not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S50, ForStatement) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 120: V[Prototype, _leftbrace, StatementList, Statement] = goto(S52, 69)
I:   StatementList → StatementList Statement •                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(33)

State 121: V[Prototype, _leftbrace, StatementList, _rightbrace] = goto(S52, 44)
I:   StatementListOpt → StatementList _rightbrace •                                                   FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } REDUCE(31)

State 122: V[Prototype, _leftbrace, Expression, _semicolon] = goto(S59, 36)
I:   Statement → Expression _semicolon •                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(38)

State 123: V[Prototype, _leftbrace, FieldDeclList, FieldDecl] = goto(S66, 55)
I:   FieldDeclList → FieldDeclList FieldDecl •                                                        FOLLOW={ _not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_doubleliteral,_readln,_stringliteral,_return,_string,_id,_while,_minus } REDUCE(29)

State 124: V[Prototype, _leftbrace, FieldDeclList, StatementListOpt] = goto(S66, 67)
I:   FieldDeclListOpt → FieldDeclList StatementListOpt •                                              FOLLOW={ _eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } REDUCE(27)

State 125: V[Prototype, _leftbrace, _println, _leftparen] = goto(S70, 39)
I:   Statement → _println _leftparen • ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S167, ExpressionList) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _comma,_rightparen } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     ExpressionList → • Expression                                                                    FOLLOW={ _comma,_rightparen } GOTO(S153, Expression) 
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     ExpressionList → • ExpressionList _comma Expression                                              FOLLOW={ _comma,_rightparen } GOTO(S167, ExpressionList) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 126: V[_class, _id, _extends, _id] = goto(S75, 51)
I:   Super → _extends _id • Interfaces                                                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S170, Interfaces) 
     Interfaces → • _leftbrace ClassBodyOpt                                                           FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S77, _leftbrace) SHIFT
     Interfaces → • _implements IdentifierList _leftbrace ClassBodyOpt                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S78, _implements) SHIFT

State 127: V[_class, _id, _leftbrace, ClassBodyOpt] = goto(S77, 82)
I:   Interfaces → _leftbrace ClassBodyOpt •                                                           FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(59)

State 128: V[_class, _id, _leftbrace, MethodDecl] = goto(S77, 60)
I:   Member → MethodDecl •                                                                            FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } REDUCE(68)

State 129: V[_class, _id, _leftbrace, MemberList] = goto(S77, 83)
I:   MemberList → MemberList • Member                                                                 FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S171, Member) 
I:   ClassBodyOpt → MemberList • _rightbrace                                                          FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S172, _rightbrace) SHIFT
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     Member → • MethodDecl                                                                            FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S128, MethodDecl) 
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     FieldDecl → • TypeAndIdentifier _semicolon                                                       FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S6, TypeAndIdentifier) 
     Prototype → • TypeAndIdentifier _leftparen ArgumentListOpt                                       FOLLOW={ _leftbrace } GOTO(S6, TypeAndIdentifier) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     Member → • FieldDecl                                                                             FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S130, FieldDecl) 
     MethodDecl → • Prototype Block                                                                   FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S8, Prototype) 
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Prototype → • _void _id _leftparen ArgumentListOpt                                               FOLLOW={ _leftbrace } GOTO(S12, _void) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _semicolon,_leftparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 

State 130: V[_class, _id, _leftbrace, FieldDecl] = goto(S77, 55)
I:   Member → FieldDecl •                                                                             FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } REDUCE(67)

State 131: V[_class, _id, _leftbrace, Member] = goto(S77, 84)
I:   MemberList → Member •                                                                            FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } REDUCE(65)

State 132: V[_class, _id, _leftbrace, _rightbrace] = goto(S77, 44)
I:   ClassBodyOpt → _rightbrace •                                                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(63)

State 133: V[_class, _id, _implements, IdentifierList] = goto(S78, 81)
I:   IdentifierList → IdentifierList • _comma _id                                                     FOLLOW={ _comma,_leftbrace } GOTO(S173, _comma) SHIFT
I:   Interfaces → _implements IdentifierList • _leftbrace ClassBodyOpt                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S174, _leftbrace) SHIFT

State 134: V[_class, _id, _implements, _id] = goto(S78, 51)
I:   IdentifierList → _id •                                                                           FOLLOW={ _comma,_leftbrace } REDUCE(61)

State 135: V[_interface, _id, _leftbrace, PrototypeList, PrototypeDecl] = goto(S82, 88)
I:   PrototypeList → PrototypeList PrototypeDecl •                                                    FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } REDUCE(73)

State 136: V[_interface, _id, _leftbrace, PrototypeList, _rightbrace] = goto(S82, 44)
I:   PrototypeListOpt → PrototypeList _rightbrace •                                                   FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(71)

State 137: V[_interface, _id, _leftbrace, Prototype, _semicolon] = goto(S83, 36)
I:   PrototypeDecl → Prototype _semicolon •                                                           FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } REDUCE(74)

State 138: V[TypeAndIdentifier, _leftparen, ArgumentList, _comma, TypeAndIdentifier] = goto(S85, 56)
I:   ArgumentList → ArgumentList _comma TypeAndIdentifier •                                           FOLLOW={ _comma,_rightparen } REDUCE(24)

State 139: V[Prototype, _leftbrace, _for, _leftparen, ForControl] = goto(S88, 73)
I:   ForStatement → _for _leftparen ForControl • Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S168, Statement) 
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S23, _leftbrace) SHIFT
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Statement → • _println _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S70, _println) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     IfStatement → • _if ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Statement → • _semicolon                                                                         FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S62, _semicolon) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     IfStatement → • _if ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Statement → • WhileStatement                                                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S44, WhileStatement) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     Statement → • Expression _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S59, Expression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     WhileStatement → • _while ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S41, _while) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Statement → • _return ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S39, _return) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     Statement → • Block                                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S54, Block) 
     Statement → • _break _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S38, _break) SHIFT
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Statement → • IfStatement                                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S37, IfStatement) 
     ForStatement → • _for _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S35, _for) SHIFT
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Statement → • ForStatement                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S50, ForStatement) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 140: V[Prototype, _leftbrace, _for, _leftparen, _semicolon] = goto(S88, 36)
I:   ForControl1 → _semicolon • Expression _semicolon _rightparen                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S175, Expression) 
I:   ForControl1 → _semicolon • Expression _semicolon Expression _rightparen                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S175, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 141: V[Prototype, _leftbrace, _for, _leftparen, Expression] = goto(S88, 89)
I:   ForControl → Expression • ForControl1                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S176, ForControl1) 
     ForControl1 → • _semicolon Expression _semicolon _rightparen                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S140, _semicolon) SHIFT
     ForControl1 → • _semicolon Expression _semicolon Expression _rightparen                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S140, _semicolon) SHIFT

State 142: V[Prototype, _leftbrace, _for, _leftparen, ForControl1] = goto(S88, 74)
I:   ForControl → ForControl1 •                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(47)

State 143: V[Prototype, _leftbrace, _return, Expression, _semicolon] = goto(S93, 36)
I:   ReturnExpressionOpt → Expression _semicolon •                                                    FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(53)

State 144: V[Prototype, _leftbrace, _while, ParExpression, Statement] = goto(S94, 69)
I:   WhileStatement → _while ParExpression Statement •                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(51)

State 145: V[Prototype, _leftbrace, _readln, _leftparen, _rightparen] = goto(S95, 40)
I:   Primary → _readln _leftparen _rightparen •                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(87)

State 146: V[Prototype, _leftbrace, PrefixOperator, Name, IndexResolver] = goto(S96, 97)
I:   IndexResolver → IndexResolver • _leftbracket Expression _rightbracket                            FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S160, _leftbracket) SHIFT
I:   Primary → Name IndexResolver •                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(83)

State 147: V[Prototype, _leftbrace, MethodCall, _period, _id] = goto(S97, 51)
I:   MethodCall → MethodCall _period _id • _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S151, _leftparen) SHIFT
I:   MethodCall → MethodCall _period _id • _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S151, _leftparen) SHIFT

State 148: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral] = goto(S98, 47)
I:   Primary → _newarray _leftparen _integerliteral • _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S152, _comma) SHIFT

State 149: V[Prototype, _leftbrace, _return, _id, _leftparen, ExpressionList] = goto(S99, 77)
I:   MethodCall → _id _leftparen ExpressionList • _rightparen                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S157, _rightparen) SHIFT
I:   ExpressionList → ExpressionList • _comma Expression                                              FOLLOW={ _comma,_rightparen } GOTO(S156, _comma) SHIFT

State 150: V[Prototype, _leftbrace, _return, _id, _leftparen, _rightparen] = goto(S99, 40)
I:   MethodCall → _id _leftparen _rightparen •                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(107)

State 151: V[Prototype, _leftbrace, MethodCall, _period, _id, _leftparen] = goto(S147, 39)
I:   MethodCall → MethodCall _period _id _leftparen • ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S163, ExpressionList) 
I:   MethodCall → MethodCall _period _id _leftparen • _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S162, _rightparen) SHIFT
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _comma,_rightparen } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     ExpressionList → • Expression                                                                    FOLLOW={ _comma,_rightparen } GOTO(S153, Expression) 
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     ExpressionList → • ExpressionList _comma Expression                                              FOLLOW={ _comma,_rightparen } GOTO(S163, ExpressionList) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 152: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma] = goto(S148, 37)
I:   Primary → _newarray _leftparen _integerliteral _comma • Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S154, Type) 
     SimpleType → • _bool                                                                             FOLLOW={ _rightparen,_leftbracket } GOTO(S2, _bool) SHIFT
     SimpleType → • _string                                                                           FOLLOW={ _rightparen,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _rightparen,_leftbracket } GOTO(S10, _id) SHIFT
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _rightparen,_leftbracket } GOTO(S154, Type) 
     SimpleType → • _int                                                                              FOLLOW={ _rightparen,_leftbracket } GOTO(S14, _int) SHIFT
     Type → • SimpleType                                                                              FOLLOW={ _rightparen,_leftbracket } GOTO(S15, SimpleType) 
     SimpleType → • _double                                                                           FOLLOW={ _rightparen,_leftbracket } GOTO(S7, _double) SHIFT

State 153: V[Prototype, _leftbrace, MethodCall, _period, _id, _leftparen, Expression] = goto(S151, 89)
I:   ExpressionList → Expression •                                                                    FOLLOW={ _comma,_rightparen } REDUCE(54)

State 154: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, Type] = goto(S152, 57)
I:   Type → Type • _leftbracket _rightbracket                                                         FOLLOW={ _rightparen,_leftbracket } GOTO(S25, _leftbracket) SHIFT
I:   Primary → _newarray _leftparen _integerliteral _comma Type • _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S177, _rightparen) SHIFT

State 155: V[Prototype, _leftbrace, _leftparen, Expression, _rightparen] = goto(S117, 40)
I:   ParExpression → _leftparen Expression _rightparen •                                              FOLLOW={ _break,_for,_if,_newarray,_println,_readln,_return,_while,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal,_and,_or,_not,_semicolon,_comma,_leftparen,_rightparen,_rightbracket,_leftbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id } REDUCE(45)

State 156: V[Prototype, _leftbrace, _return, _id, _leftparen, ExpressionList, _comma] = goto(S149, 37)
I:   ExpressionList → ExpressionList _comma • Expression                                              FOLLOW={ _comma,_rightparen } GOTO(S178, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _comma,_rightparen } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_comma,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _comma,_rightparen } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 157: V[Prototype, _leftbrace, _return, _id, _leftparen, ExpressionList, _rightparen] = goto(S149, 40)
I:   MethodCall → _id _leftparen ExpressionList _rightparen •                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(108)

State 158: V[Prototype, _leftbrace, Name, _assignop, Expression] = goto(S101, 89)
I:   Expression → Name _assignop Expression •                                                         FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } REDUCE(75)

State 159: V[Prototype, _leftbrace, Name, IndexResolver, _assignop] = goto(S102, 35)
I:   Expression → Name IndexResolver _assignop • Expression                                           FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S179, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 160: V[Prototype, _leftbrace, Name, IndexResolver, _leftbracket] = goto(S102, 41)
I:   IndexResolver → IndexResolver _leftbracket • Expression _rightbracket                            FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S180, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _rightbracket } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _rightbracket } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_period,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _rightbracket } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 161: V[Prototype, _leftbrace, Name, _period, _id] = goto(S103, 51)
I:   Name → Name _period _id •                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(17)

State 162: V[Prototype, _leftbrace, MethodCall, _period, _id, _leftparen, _rightparen] = goto(S151, 40)
I:   MethodCall → MethodCall _period _id _leftparen _rightparen •                                     FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(109)

State 163: V[Prototype, _leftbrace, MethodCall, _period, _id, _leftparen, ExpressionList] = goto(S151, 77)
I:   ExpressionList → ExpressionList • _comma Expression                                              FOLLOW={ _comma,_rightparen } GOTO(S156, _comma) SHIFT
I:   MethodCall → MethodCall _period _id _leftparen ExpressionList • _rightparen                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S181, _rightparen) SHIFT

State 164: V[Prototype, _leftbrace, BinaryExpression, InfixOperator, UnaryExpression] = goto(S116, 91)
I:   BinaryExpression → BinaryExpression InfixOperator UnaryExpression •                              FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(78)

State 165: V[Prototype, _leftbrace, Name, _leftbracket, Expression] = goto(S100, 89)
I:   IndexResolver → _leftbracket Expression • _rightbracket                                          FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S182, _rightbracket) SHIFT

State 166: V[Prototype, _leftbrace, _if, ParExpression, Statement] = goto(S119, 69)
I:   IfStatement → _if ParExpression Statement • _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S169, _else) SHIFT
I:   IfStatement → _if ParExpression Statement •                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(43)

State 167: V[Prototype, _leftbrace, _println, _leftparen, ExpressionList] = goto(S125, 77)
I:   Statement → _println _leftparen ExpressionList • _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S183, _rightparen) SHIFT
I:   ExpressionList → ExpressionList • _comma Expression                                              FOLLOW={ _comma,_rightparen } GOTO(S156, _comma) SHIFT

State 168: V[Prototype, _leftbrace, _for, _leftparen, ForControl, Statement] = goto(S139, 69)
I:   ForStatement → _for _leftparen ForControl Statement •                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(46)

State 169: V[Prototype, _leftbrace, _if, ParExpression, Statement, _else] = goto(S166, 7)
I:   IfStatement → _if ParExpression Statement _else • Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S184, Statement) 
     Block → • _leftbrace FieldDeclListOpt                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S23, _leftbrace) SHIFT
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Statement → • _println _leftparen ExpressionList _rightparen _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S70, _println) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _semicolon } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _semicolon } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     IfStatement → • _if ParExpression Statement _else Statement                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     Statement → • _semicolon                                                                         FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S62, _semicolon) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     IfStatement → • _if ParExpression Statement                                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S46, _if) SHIFT
     Statement → • WhileStatement                                                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S44, WhileStatement) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     Statement → • Expression _semicolon                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S59, Expression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     WhileStatement → • _while ParExpression Statement                                                FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S41, _while) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Statement → • _return ReturnExpressionOpt                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S39, _return) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     Statement → • Block                                                                              FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S54, Block) 
     Statement → • _break _semicolon                                                                  FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S38, _break) SHIFT
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Statement → • IfStatement                                                                        FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S37, IfStatement) 
     ForStatement → • _for _leftparen ForControl Statement                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S35, _for) SHIFT
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Statement → • ForStatement                                                                       FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S50, ForStatement) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_semicolon,_period,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _semicolon } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 170: V[_class, _id, _extends, _id, Interfaces] = goto(S126, 80)
I:   Super → _extends _id Interfaces •                                                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(58)

State 171: V[_class, _id, _leftbrace, MemberList, Member] = goto(S129, 84)
I:   MemberList → MemberList Member •                                                                 FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } REDUCE(66)

State 172: V[_class, _id, _leftbrace, MemberList, _rightbrace] = goto(S129, 44)
I:   ClassBodyOpt → MemberList _rightbrace •                                                          FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(64)

State 173: V[_class, _id, _implements, IdentifierList, _comma] = goto(S133, 37)
I:   IdentifierList → IdentifierList _comma • _id                                                     FOLLOW={ _comma,_leftbrace } GOTO(S185, _id) SHIFT

State 174: V[_class, _id, _implements, IdentifierList, _leftbrace] = goto(S133, 43)
I:   Interfaces → _implements IdentifierList _leftbrace • ClassBodyOpt                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S186, ClassBodyOpt) 
     SimpleType → • _bool                                                                             FOLLOW={ _id,_leftbracket } GOTO(S2, _bool) SHIFT
     Member → • MethodDecl                                                                            FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S128, MethodDecl) 
     Type → • Type _leftbracket _rightbracket                                                         FOLLOW={ _id,_leftbracket } GOTO(S3, Type) 
     FieldDecl → • TypeAndIdentifier _semicolon                                                       FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S6, TypeAndIdentifier) 
     Prototype → • TypeAndIdentifier _leftparen ArgumentListOpt                                       FOLLOW={ _leftbrace } GOTO(S6, TypeAndIdentifier) 
     SimpleType → • _double                                                                           FOLLOW={ _id,_leftbracket } GOTO(S7, _double) SHIFT
     ClassBodyOpt → • MemberList _rightbrace                                                          FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S129, MemberList) 
     Member → • FieldDecl                                                                             FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S130, FieldDecl) 
     MemberList → • Member                                                                            FOLLOW={ _bool,_string,_id,_void,_double,_int,_rightbrace } GOTO(S131, Member) 
     MethodDecl → • Prototype Block                                                                   FOLLOW={ _bool,_string,_id,_void,_double,_int } GOTO(S8, Prototype) 
     SimpleType → • _string                                                                           FOLLOW={ _id,_leftbracket } GOTO(S9, _string) SHIFT
     Type → • _id                                                                                     FOLLOW={ _id,_leftbracket } GOTO(S10, _id) SHIFT
     Prototype → • _void _id _leftparen ArgumentListOpt                                               FOLLOW={ _leftbrace } GOTO(S12, _void) SHIFT
     ClassBodyOpt → • _rightbrace                                                                     FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } GOTO(S132, _rightbrace) SHIFT
     SimpleType → • _int                                                                              FOLLOW={ _id,_leftbracket } GOTO(S14, _int) SHIFT
     TypeAndIdentifier → • Type _id                                                                   FOLLOW={ _semicolon,_leftparen } GOTO(S3, Type) 
     Type → • SimpleType                                                                              FOLLOW={ _id,_leftbracket } GOTO(S15, SimpleType) 
     MemberList → • MemberList Member                                                                 FOLLOW={ _bool,_string,_id,_void,_double,_rightbrace,_int } GOTO(S129, MemberList) 

State 175: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression] = goto(S140, 89)
I:   ForControl1 → _semicolon Expression • _semicolon _rightparen                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S187, _semicolon) SHIFT
I:   ForControl1 → _semicolon Expression • _semicolon Expression _rightparen                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S187, _semicolon) SHIFT

State 176: V[Prototype, _leftbrace, _for, _leftparen, Expression, ForControl1] = goto(S141, 74)
I:   ForControl → Expression ForControl1 •                                                            FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(48)

State 177: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, Type, _rightparen] = goto(S154, 40)
I:   Primary → _newarray _leftparen _integerliteral _comma Type _rightparen •                         FOLLOW={ _and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(88)

State 178: V[Prototype, _leftbrace, _return, _id, _leftparen, ExpressionList, _comma, Expression] = goto(S156, 89)
I:   ExpressionList → ExpressionList _comma Expression •                                              FOLLOW={ _comma,_rightparen } REDUCE(55)

State 179: V[Prototype, _leftbrace, Name, IndexResolver, _assignop, Expression] = goto(S159, 89)
I:   Expression → Name IndexResolver _assignop Expression •                                           FOLLOW={ _semicolon,_comma,_rightparen,_rightbracket } REDUCE(76)

State 180: V[Prototype, _leftbrace, Name, IndexResolver, _leftbracket, Expression] = goto(S160, 89)
I:   IndexResolver → IndexResolver _leftbracket Expression • _rightbracket                            FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S188, _rightbracket) SHIFT

State 181: V[Prototype, _leftbrace, MethodCall, _period, _id, _leftparen, ExpressionList, _rightparen] = goto(S163, 40)
I:   MethodCall → MethodCall _period _id _leftparen ExpressionList _rightparen •                      FOLLOW={ _and,_or,_semicolon,_comma,_period,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(110)

State 182: V[Prototype, _leftbrace, Name, _leftbracket, Expression, _rightbracket] = goto(S165, 42)
I:   IndexResolver → _leftbracket Expression _rightbracket •                                          FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(112)

State 183: V[Prototype, _leftbrace, _println, _leftparen, ExpressionList, _rightparen] = goto(S167, 40)
I:   Statement → _println _leftparen ExpressionList _rightparen • _semicolon                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S189, _semicolon) SHIFT

State 184: V[Prototype, _leftbrace, _if, ParExpression, Statement, _else, Statement] = goto(S169, 69)
I:   IfStatement → _if ParExpression Statement _else Statement •                                      FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(44)

State 185: V[_class, _id, _implements, IdentifierList, _comma, _id] = goto(S173, 51)
I:   IdentifierList → IdentifierList _comma _id •                                                     FOLLOW={ _comma,_leftbrace } REDUCE(62)

State 186: V[_class, _id, _implements, IdentifierList, _leftbrace, ClassBodyOpt] = goto(S174, 82)
I:   Interfaces → _implements IdentifierList _leftbrace ClassBodyOpt •                                FOLLOW={ _eof,_bool,_string,_id,_void,_class,_double,_int,_interface } REDUCE(60)

State 187: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon] = goto(S175, 36)
I:   ForControl1 → _semicolon Expression _semicolon • _rightparen                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S190, _rightparen) SHIFT
I:   ForControl1 → _semicolon Expression _semicolon • Expression _rightparen                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S191, Expression) 
     ParExpression → • _leftparen Expression _rightparen                                              FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S71, _leftparen) SHIFT
     MethodCall → • _id _leftparen ExpressionList _rightparen                                         FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Expression → • BinaryExpression                                                                  FOLLOW={ _rightparen } GOTO(S69, BinaryExpression) 
     Expression → • Name IndexResolver _assignop Expression                                           FOLLOW={ _rightparen } GOTO(S68, Name) 
     PrefixOperator → • _minus                                                                        FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S48, _minus) SHIFT
     MethodCall → • _id _leftparen _rightparen                                                        FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT
     Literal → • _stringliteral                                                                       FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S47, _stringliteral) SHIFT
     Literal → • _integerliteral                                                                      FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S64, _integerliteral) SHIFT
     Primary → • Literal                                                                              FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S45, Literal) 
     Primary → • _readln _leftparen _rightparen                                                       FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S63, _readln) SHIFT
     BinaryExpression → • UnaryExpression                                                             FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S61, UnaryExpression) 
     UnaryExpression → • Primary                                                                      FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S60, Primary) 
     BinaryExpression → • BinaryExpression InfixOperator UnaryExpression                              FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S69, BinaryExpression) 
     PrefixOperator → • _not                                                                          FOLLOW={ _doubleliteral,_readln,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral } GOTO(S42, _not) SHIFT
     Primary → • _newarray _leftparen _integerliteral _comma Type _rightparen                         FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S58, _newarray) SHIFT
     Literal → • _doubleliteral                                                                       FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S40, _doubleliteral) SHIFT
     Literal → • _booleanliteral                                                                      FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S56, _booleanliteral) SHIFT
     Primary → • MethodCall                                                                           FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Name → • Name _period _id                                                                        FOLLOW={ _and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     UnaryExpression → • PrefixOperator UnaryExpression                                               FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S53, PrefixOperator) 
     Primary → • ParExpression                                                                        FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S51, ParExpression) 
     Primary → • Name IndexResolver                                                                   FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen ExpressionList _rightparen                      FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Primary → • Name                                                                                 FOLLOW={ _and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S68, Name) 
     MethodCall → • MethodCall _period _id _leftparen _rightparen                                     FOLLOW={ _and,_or,_period,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S55, MethodCall) 
     Expression → • Name _assignop Expression                                                         FOLLOW={ _rightparen } GOTO(S68, Name) 
     Name → • _id                                                                                     FOLLOW={ _and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } GOTO(S91, _id) SHIFT

State 188: V[Prototype, _leftbrace, Name, IndexResolver, _leftbracket, Expression, _rightbracket] = goto(S180, 42)
I:   IndexResolver → IndexResolver _leftbracket Expression _rightbracket •                            FOLLOW={ _and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal } REDUCE(111)

State 189: V[Prototype, _leftbrace, _println, _leftparen, ExpressionList, _rightparen, _semicolon] = goto(S183, 36)
I:   Statement → _println _leftparen ExpressionList _rightparen _semicolon •                          FOLLOW={ _not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(42)

State 190: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon, _rightparen] = goto(S187, 40)
I:   ForControl1 → _semicolon Expression _semicolon _rightparen •                                     FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(49)

State 191: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon, Expression] = goto(S187, 89)
I:   ForControl1 → _semicolon Expression _semicolon Expression • _rightparen                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } GOTO(S192, _rightparen) SHIFT

State 192: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon, Expression, _rightparen] = goto(S191, 40)
I:   ForControl1 → _semicolon Expression _semicolon Expression _rightparen •                          FOLLOW={ _not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_doubleliteral,_readln,_stringliteral,_return,_id,_while,_minus } REDUCE(50)

