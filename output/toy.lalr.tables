State 0: V[]
I:   Program -> . DeclList                            FOLLOW={_eof}                    goto(S1, DeclList)               
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     InterfaceDecl -> . _interface _id _leftbrace PrototypeListOpt FOLLOW={_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S4, _interface)             shift
     Prototype -> . TypeAndIdentifier _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S5, TypeAndIdentifier)      
     Prototype -> . _void _id _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S6, _void)                  shift
     FieldDecl -> . TypeAndIdentifier _semicolon      FOLLOW={_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S5, TypeAndIdentifier)      
     Decl -> . MethodDecl                             FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S7, MethodDecl)             
     DeclList -> . DeclList Decl                      FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S1, DeclList)               
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     MethodDecl -> . Prototype Block                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S9, Prototype)              
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     Decl -> . InterfaceDecl                          FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S11, InterfaceDecl)         
     ClassDecl -> . _class _id Super                  FOLLOW={_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S12, _class)                shift
     Decl -> . FieldDecl                              FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S13, FieldDecl)             
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_semicolon,_leftparen}   goto(S2, SimpleType)             
     Decl -> . ClassDecl                              FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S16, ClassDecl)             
     DeclList -> . Decl                               FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S17, Decl)                  
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 1: V[DeclList] = goto(S0, 53)
I:   DeclList -> DeclList . Decl                      FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S19, Decl)                  
I:   Program -> DeclList .                            FOLLOW={_eof}                    reduce(0)
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     InterfaceDecl -> . _interface _id _leftbrace PrototypeListOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S4, _interface)             shift
     Prototype -> . TypeAndIdentifier _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S5, TypeAndIdentifier)      
     Prototype -> . _void _id _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S6, _void)                  shift
     FieldDecl -> . TypeAndIdentifier _semicolon      FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S5, TypeAndIdentifier)      
     Decl -> . MethodDecl                             FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S7, MethodDecl)             
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     MethodDecl -> . Prototype Block                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S9, Prototype)              
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     Decl -> . InterfaceDecl                          FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S11, InterfaceDecl)         
     ClassDecl -> . _class _id Super                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S12, _class)                shift
     Decl -> . FieldDecl                              FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S13, FieldDecl)             
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_semicolon,_leftparen}   goto(S2, SimpleType)             
     Decl -> . ClassDecl                              FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S16, ClassDecl)             
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 2: V[SimpleType] = goto(S0, 57)
I:   SimpleType -> SimpleType . _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S24, _leftbracket)          shift
I:   TypeAndIdentifier -> SimpleType . _id            FOLLOW={_semicolon,_comma,_leftparen,_rightparen} goto(S25, _id)                   shift

State 3: V[_id] = goto(S0, 51)
I:   TypeAndIdentifier -> _id . _id                   FOLLOW={_semicolon,_comma,_leftparen,_rightparen} goto(S26, _id)                   shift
I:   TypeAndIdentifier -> _id . ArrayType _id         FOLLOW={_semicolon,_comma,_leftparen,_rightparen} goto(S27, ArrayType)             
     ArrayType -> . ArrayType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S27, ArrayType)             
     ArrayType -> . _leftbracket _rightbracket        FOLLOW={_id,_leftbracket}        goto(S28, _leftbracket)          shift

State 4: V[_interface] = goto(S0, 13)
I:   InterfaceDecl -> _interface . _id _leftbrace PrototypeListOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S20, _id)                   shift

State 5: V[TypeAndIdentifier] = goto(S0, 56)
I:   Prototype -> TypeAndIdentifier . _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S22, _leftparen)            shift
I:   FieldDecl -> TypeAndIdentifier . _semicolon      FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface} goto(S21, _semicolon)            shift

State 6: V[_void] = goto(S0, 19)
I:   Prototype -> _void . _id _leftparen ArgumentListOpt FOLLOW={_semicolon,_leftbrace}   goto(S29, _id)                   shift

State 7: V[MethodDecl] = goto(S0, 63)
I:   Decl -> MethodDecl .                             FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(5)

State 8: V[_double] = goto(S0, 6)
I:   BasicType -> _double .                           FOLLOW={_id,_rightparen,_leftbracket} reduce(17)

State 9: V[Prototype] = goto(S0, 64)
I:   MethodDecl -> Prototype . Block                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface} goto(S30, Block)                 
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface} goto(S31, _leftbrace)            shift

State 10: V[_bool] = goto(S0, 2)
I:   BasicType -> _bool .                             FOLLOW={_id,_rightparen,_leftbracket} reduce(16)

State 11: V[InterfaceDecl] = goto(S0, 88)
I:   Decl -> InterfaceDecl .                          FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(6)

State 12: V[_class] = goto(S0, 4)
I:   ClassDecl -> _class . _id Super                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S23, _id)                   shift

State 13: V[FieldDecl] = goto(S0, 55)
I:   Decl -> FieldDecl .                              FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(3)

State 14: V[_int] = goto(S0, 12)
I:   BasicType -> _int .                              FOLLOW={_id,_rightparen,_leftbracket} reduce(15)

State 15: V[BasicType] = goto(S0, 59)
I:   SimpleType -> BasicType .                        FOLLOW={_id,_rightparen,_leftbracket} reduce(12)

State 16: V[ClassDecl] = goto(S0, 81)
I:   Decl -> ClassDecl .                              FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(4)

State 17: V[Decl] = goto(S0, 54)
I:   DeclList -> Decl .                               FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(1)

State 18: V[_string] = goto(S0, 18)
I:   BasicType -> _string .                           FOLLOW={_id,_rightparen,_leftbracket} reduce(18)

State 19: V[DeclList, Decl] = goto(S1, 54)
I:   DeclList -> DeclList Decl .                      FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(2)

State 20: V[_interface, _id] = goto(S4, 51)
I:   InterfaceDecl -> _interface _id . _leftbrace PrototypeListOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S32, _leftbrace)            shift

State 21: V[TypeAndIdentifier, _semicolon] = goto(S5, 36)
I:   FieldDecl -> TypeAndIdentifier _semicolon .      FOLLOW={_eof,_bool,_break,_class,_double,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} reduce(7)

State 22: V[TypeAndIdentifier, _leftparen] = goto(S5, 39)
I:   Prototype -> TypeAndIdentifier _leftparen . ArgumentListOpt FOLLOW={_semicolon,_leftbrace}   goto(S33, ArgumentListOpt)       
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_comma,_rightparen}      goto(S3, _id)                    shift
     ArgumentList -> . TypeAndIdentifier              FOLLOW={_comma,_rightparen}      goto(S36, TypeAndIdentifier)     
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_comma,_rightparen}      goto(S3, _id)                    shift
     ArgumentListOpt -> . _rightparen                 FOLLOW={_semicolon,_leftbrace}   goto(S37, _rightparen)           shift
     ArgumentListOpt -> . ArgumentList _rightparen    FOLLOW={_semicolon,_leftbrace}   goto(S38, ArgumentList)          
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     ArgumentList -> . ArgumentList _comma TypeAndIdentifier FOLLOW={_comma,_rightparen}      goto(S38, ArgumentList)          
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_comma,_rightparen}      goto(S2, SimpleType)             
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 23: V[_class, _id] = goto(S12, 51)
I:   ClassDecl -> _class _id . Super                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S39, Super)                 
     Interfaces -> . _leftbrace ClassBodyOpt          FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S40, _leftbrace)            shift
     Interfaces -> . _implements IdentifierList _leftbrace ClassBodyOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S41, _implements)           shift
     Super -> . _extends _id Interfaces               FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S42, _extends)              shift
     Super -> . Interfaces                            FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S43, Interfaces)            

State 24: V[SimpleType, _leftbracket] = goto(S2, 41)
I:   SimpleType -> SimpleType _leftbracket . _rightbracket FOLLOW={_id,_rightparen,_leftbracket} goto(S44, _rightbracket)         shift

State 25: V[SimpleType, _id] = goto(S2, 51)
I:   TypeAndIdentifier -> SimpleType _id .            FOLLOW={_semicolon,_comma,_leftparen,_rightparen} reduce(9)

State 26: V[_id, _id] = goto(S3, 51)
I:   TypeAndIdentifier -> _id _id .                   FOLLOW={_semicolon,_comma,_leftparen,_rightparen} reduce(8)

State 27: V[_id, ArrayType] = goto(S3, 58)
I:   ArrayType -> ArrayType . _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S35, _leftbracket)          shift
I:   TypeAndIdentifier -> _id ArrayType . _id         FOLLOW={_semicolon,_comma,_leftparen,_rightparen} goto(S34, _id)                   shift

State 28: V[_id, _leftbracket] = goto(S3, 41)
I:   ArrayType -> _leftbracket . _rightbracket        FOLLOW={_id,_rightparen,_leftbracket} goto(S45, _rightbracket)         shift

State 29: V[_void, _id] = goto(S6, 51)
I:   Prototype -> _void _id . _leftparen ArgumentListOpt FOLLOW={_semicolon,_leftbrace}   goto(S46, _leftparen)            shift

State 30: V[Prototype, Block] = goto(S9, 67)
I:   MethodDecl -> Prototype Block .                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_rightbrace,_interface} reduce(23)

State 31: V[Prototype, _leftbrace] = goto(S9, 43)
I:   Block -> _leftbrace . FieldDeclListOpt           FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S47, FieldDeclListOpt)      
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     FieldDecl -> . TypeAndIdentifier _semicolon      FOLLOW={_bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} goto(S50, TypeAndIdentifier)     
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S31, _leftbrace)            shift
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Statement -> . _return ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S85, _return)               shift
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     StatementList -> . StatementList Statement       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S83, StatementList)         
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     IfStatement -> . _if ParExpression Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     TypeAndIdentifier -> . _id _id                   FOLLOW={_semicolon}              goto(S49, _id)                   shift
     Statement -> . Expression _semicolon             FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S79, Expression)            
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     FieldDeclList -> . FieldDecl                     FOLLOW={_bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} goto(S77, FieldDecl)             
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     WhileStatement -> . _while ParExpression Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S74, _while)                shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     ForStatement -> . _for _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S73, _for)                  shift
     Statement -> . Block                             FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S72, Block)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_semicolon}              goto(S2, SimpleType)             
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     Statement -> . ForStatement                      FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S67, ForStatement)          
     StatementListOpt -> . _rightbrace                FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S66, _rightbrace)           shift
     Statement -> . WhileStatement                    FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S65, WhileStatement)        
     FieldDeclList -> . FieldDeclList FieldDecl       FOLLOW={_not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} goto(S64, FieldDeclList)         
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     IfStatement -> . _if ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Statement -> . _println _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S60, _println)              shift
     Statement -> . _break _semicolon                 FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S59, _break)                shift
     FieldDeclListOpt -> . StatementListOpt           FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S58, StatementListOpt)      
     StatementListOpt -> . StatementList _rightbrace  FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S83, StatementList)         
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_semicolon}              goto(S49, _id)                   shift
     FieldDeclListOpt -> . FieldDeclList StatementListOpt FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S64, FieldDeclList)         
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Statement -> . _semicolon                        FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S55, _semicolon)            shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     StatementList -> . Statement                     FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S53, Statement)             
     Statement -> . IfStatement                       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S52, IfStatement)           
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 32: V[_interface, _id, _leftbrace] = goto(S20, 43)
I:   InterfaceDecl -> _interface _id _leftbrace . PrototypeListOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S96, PrototypeListOpt)      
     PrototypeListOpt -> . PrototypeList _rightbrace  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S97, PrototypeList)         
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_leftparen}              goto(S3, _id)                    shift
     Prototype -> . TypeAndIdentifier _leftparen ArgumentListOpt FOLLOW={_semicolon}              goto(S98, TypeAndIdentifier)     
     Prototype -> . _void _id _leftparen ArgumentListOpt FOLLOW={_semicolon}              goto(S6, _void)                  shift
     PrototypeListOpt -> . _rightbrace                FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S102, _rightbrace)          shift
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_leftparen}              goto(S3, _id)                    shift
     PrototypeList -> . PrototypeList PrototypeDecl   FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} goto(S97, PrototypeList)         
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     PrototypeList -> . PrototypeDecl                 FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} goto(S103, PrototypeDecl)        
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_leftparen}              goto(S2, SimpleType)             
     PrototypeDecl -> . Prototype _semicolon          FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} goto(S104, Prototype)            
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 33: V[TypeAndIdentifier, _leftparen, ArgumentListOpt] = goto(S22, 65)
I:   Prototype -> TypeAndIdentifier _leftparen ArgumentListOpt . FOLLOW={_semicolon,_leftbrace}   reduce(24)

State 34: V[_id, ArrayType, _id] = goto(S27, 51)
I:   TypeAndIdentifier -> _id ArrayType _id .         FOLLOW={_semicolon,_comma,_leftparen,_rightparen} reduce(10)

State 35: V[_id, ArrayType, _leftbracket] = goto(S27, 41)
I:   ArrayType -> ArrayType _leftbracket . _rightbracket FOLLOW={_id,_rightparen,_leftbracket} goto(S105, _rightbracket)        shift

State 36: V[TypeAndIdentifier, _leftparen, TypeAndIdentifier] = goto(S22, 56)
I:   ArgumentList -> TypeAndIdentifier .              FOLLOW={_comma,_rightparen}      reduce(28)

State 37: V[TypeAndIdentifier, _leftparen, _rightparen] = goto(S22, 40)
I:   ArgumentListOpt -> _rightparen .                 FOLLOW={_semicolon,_leftbrace}   reduce(26)

State 38: V[TypeAndIdentifier, _leftparen, ArgumentList] = goto(S22, 66)
I:   ArgumentListOpt -> ArgumentList . _rightparen    FOLLOW={_semicolon,_leftbrace}   goto(S100, _rightparen)          shift
I:   ArgumentList -> ArgumentList . _comma TypeAndIdentifier FOLLOW={_comma,_rightparen}      goto(S99, _comma)                shift

State 39: V[_class, _id, Super] = goto(S23, 82)
I:   ClassDecl -> _class _id Super .                  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(61)

State 40: V[_class, _id, _leftbrace] = goto(S23, 43)
I:   Interfaces -> _leftbrace . ClassBodyOpt          FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S106, ClassBodyOpt)         
     MemberList -> . Member                           FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S107, Member)               
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     Member -> . FieldDecl                            FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S108, FieldDecl)            
     Prototype -> . TypeAndIdentifier _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S5, TypeAndIdentifier)      
     Prototype -> . _void _id _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S6, _void)                  shift
     FieldDecl -> . TypeAndIdentifier _semicolon      FOLLOW={_bool,_string,_id,_void,_double,_int} goto(S5, TypeAndIdentifier)      
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     MethodDecl -> . Prototype Block                  FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S9, Prototype)              
     ClassBodyOpt -> . MemberList _rightbrace         FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S109, MemberList)           
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     ClassBodyOpt -> . _rightbrace                    FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S110, _rightbrace)          shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_semicolon,_leftparen}   goto(S2, SimpleType)             
     MemberList -> . MemberList Member                FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} goto(S109, MemberList)           
     Member -> . MethodDecl                           FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S111, MethodDecl)           
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 41: V[_class, _id, _implements] = goto(S23, 11)
I:   Interfaces -> _implements . IdentifierList _leftbrace ClassBodyOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S112, IdentifierList)       
     IdentifierList -> . IdentifierList _comma _id    FOLLOW={_comma,_leftbrace}       goto(S112, IdentifierList)       
     IdentifierList -> . _id                          FOLLOW={_comma,_leftbrace}       goto(S113, _id)                  shift

State 42: V[_class, _id, _extends] = goto(S23, 8)
I:   Super -> _extends . _id Interfaces               FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S114, _id)                  shift

State 43: V[_class, _id, Interfaces] = goto(S23, 83)
I:   Super -> Interfaces .                            FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(62)

State 44: V[SimpleType, _leftbracket, _rightbracket] = goto(S24, 42)
I:   SimpleType -> SimpleType _leftbracket _rightbracket . FOLLOW={_id,_rightparen,_leftbracket} reduce(11)

State 45: V[_id, _leftbracket, _rightbracket] = goto(S28, 42)
I:   ArrayType -> _leftbracket _rightbracket .        FOLLOW={_id,_rightparen,_leftbracket} reduce(14)

State 46: V[_void, _id, _leftparen] = goto(S29, 39)
I:   Prototype -> _void _id _leftparen . ArgumentListOpt FOLLOW={_semicolon,_leftbrace}   goto(S101, ArgumentListOpt)      
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_comma,_rightparen}      goto(S3, _id)                    shift
     ArgumentList -> . TypeAndIdentifier              FOLLOW={_comma,_rightparen}      goto(S36, TypeAndIdentifier)     
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_comma,_rightparen}      goto(S3, _id)                    shift
     ArgumentListOpt -> . _rightparen                 FOLLOW={_semicolon,_leftbrace}   goto(S37, _rightparen)           shift
     ArgumentListOpt -> . ArgumentList _rightparen    FOLLOW={_semicolon,_leftbrace}   goto(S38, ArgumentList)          
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     ArgumentList -> . ArgumentList _comma TypeAndIdentifier FOLLOW={_comma,_rightparen}      goto(S38, ArgumentList)          
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_comma,_rightparen}      goto(S2, SimpleType)             
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 47: V[Prototype, _leftbrace, FieldDeclListOpt] = goto(S31, 68)
I:   Block -> _leftbrace FieldDeclListOpt .           FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} reduce(30)

State 48: V[Prototype, _leftbrace, _newarray] = goto(S31, 14)
I:   Primary -> _newarray . _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S93, _leftparen)            shift
I:   Primary -> _newarray . _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S93, _leftparen)            shift
I:   Primary -> _newarray . _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S93, _leftparen)            shift

State 49: V[Prototype, _leftbrace, _id] = goto(S31, 51)
I:   MethodCall -> _id . _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S92, _period)               shift
I:   TypeAndIdentifier -> _id . _id                   FOLLOW={_semicolon}              goto(S26, _id)                   shift
I:   MethodCall2 -> _id . _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S91, _leftparen)            shift
I:   SimpleName -> _id .                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(21)
I:   MethodCall2 -> _id . _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S91, _leftparen)            shift
I:   TypeAndIdentifier -> _id . ArrayType _id         FOLLOW={_semicolon}              goto(S27, ArrayType)             
     ArrayType -> . ArrayType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S27, ArrayType)             
     ArrayType -> . _leftbracket _rightbracket        FOLLOW={_id,_leftbracket}        goto(S28, _leftbracket)          shift

State 50: V[Prototype, _leftbrace, TypeAndIdentifier] = goto(S31, 56)
I:   FieldDecl -> TypeAndIdentifier . _semicolon      FOLLOW={_bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} goto(S21, _semicolon)            shift

State 51: V[Prototype, _leftbrace, PrefixOperator] = goto(S31, 96)
I:   UnaryExpression -> PrefixOperator . UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S115, UnaryExpression)      
     Name -> . SimpleName                             FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S116, Name)                 
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S116, Name)                 
     Name -> . QualifiedName                          FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S116, Name)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     SimpleName -> . _id                              FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift

State 52: V[Prototype, _leftbrace, IfStatement] = goto(S31, 73)
I:   Statement -> IfStatement .                       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(42)

State 53: V[Prototype, _leftbrace, Statement] = goto(S31, 72)
I:   StatementList -> Statement .                     FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(37)

State 54: V[Prototype, _leftbrace, _leftparen] = goto(S31, 39)
I:   ParExpression -> _leftparen . Expression _rightparen FOLLOW={_break,_for,_if,_newarray,_println,_readln,_return,_while,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal,_and,_or,_not,_semicolon,_comma,_leftparen,_rightparen,_rightbracket,_leftbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S117, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_rightparen}             goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_rightparen}             goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_rightparen}             goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 55: V[Prototype, _leftbrace, _semicolon] = goto(S31, 36)
I:   Statement -> _semicolon .                        FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(39)

State 56: V[Prototype, _leftbrace, _integerliteral] = goto(S31, 47)
I:   Literal -> _integerliteral .                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(112)

State 57: V[Prototype, _leftbrace, Literal] = goto(S31, 98)
I:   Primary -> Literal .                             FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(89)

State 58: V[Prototype, _leftbrace, StatementListOpt] = goto(S31, 70)
I:   FieldDeclListOpt -> StatementListOpt .           FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} reduce(31)

State 59: V[Prototype, _leftbrace, _break] = goto(S31, 3)
I:   Statement -> _break . _semicolon                 FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S156, _semicolon)           shift

State 60: V[Prototype, _leftbrace, _println] = goto(S31, 15)
I:   Statement -> _println . _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S157, _leftparen)           shift

State 61: V[Prototype, _leftbrace, _doubleliteral] = goto(S31, 48)
I:   Literal -> _doubleliteral .                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(110)

State 62: V[Prototype, _leftbrace, ParExpression] = goto(S31, 74)
I:   Primary -> ParExpression .                       FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(91)

State 63: V[Prototype, _leftbrace, SimpleName] = goto(S31, 61)
I:   Name -> SimpleName .                             FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(19)

State 64: V[Prototype, _leftbrace, FieldDeclList] = goto(S31, 69)
I:   FieldDeclListOpt -> FieldDeclList . StatementListOpt FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S95, StatementListOpt)      
I:   FieldDeclList -> FieldDeclList . FieldDecl       FOLLOW={_not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} goto(S94, FieldDecl)             
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     FieldDecl -> . TypeAndIdentifier _semicolon      FOLLOW={_not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} goto(S50, TypeAndIdentifier)     
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S31, _leftbrace)            shift
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Statement -> . _return ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S85, _return)               shift
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     StatementList -> . StatementList Statement       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S83, StatementList)         
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     IfStatement -> . _if ParExpression Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Statement -> . Expression _semicolon             FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S79, Expression)            
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     TypeAndIdentifier -> . _id _id                   FOLLOW={_semicolon}              goto(S49, _id)                   shift
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     WhileStatement -> . _while ParExpression Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S74, _while)                shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     ForStatement -> . _for _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S73, _for)                  shift
     Statement -> . Block                             FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S72, Block)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_semicolon}              goto(S2, SimpleType)             
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S49, _id)                   shift
     Statement -> . ForStatement                      FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S67, ForStatement)          
     StatementListOpt -> . _rightbrace                FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S66, _rightbrace)           shift
     Statement -> . WhileStatement                    FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S65, WhileStatement)        
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     IfStatement -> . _if ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     Statement -> . _println _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S60, _println)              shift
     Statement -> . _break _semicolon                 FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S59, _break)                shift
     StatementListOpt -> . StatementList _rightbrace  FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S83, StatementList)         
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_semicolon}              goto(S49, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Statement -> . _semicolon                        FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S55, _semicolon)            shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     StatementList -> . Statement                     FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S53, Statement)             
     Statement -> . IfStatement                       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S52, IfStatement)           
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 65: V[Prototype, _leftbrace, WhileStatement] = goto(S31, 78)
I:   Statement -> WhileStatement .                    FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(45)

State 66: V[Prototype, _leftbrace, _rightbrace] = goto(S31, 44)
I:   StatementListOpt -> _rightbrace .                FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} reduce(35)

State 67: V[Prototype, _leftbrace, ForStatement] = goto(S31, 75)
I:   Statement -> ForStatement .                      FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(44)

State 68: V[Prototype, _leftbrace, MethodCall] = goto(S31, 99)
I:   Primary -> MethodCall .                          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(90)

State 69: V[Prototype, _leftbrace, _not] = goto(S31, 34)
I:   PrefixOperator -> _not .                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(96)

State 70: V[Prototype, _leftbrace, _readln] = goto(S31, 16)
I:   Primary -> _readln . _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S135, _leftparen)           shift

State 71: V[Prototype, _leftbrace, _minus] = goto(S31, 22)
I:   PrefixOperator -> _minus .                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(97)

State 72: V[Prototype, _leftbrace, Block] = goto(S31, 67)
I:   Statement -> Block .                             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(40)

State 73: V[Prototype, _leftbrace, _for] = goto(S31, 9)
I:   ForStatement -> _for . _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S158, _leftparen)           shift

State 74: V[Prototype, _leftbrace, _while] = goto(S31, 20)
I:   WhileStatement -> _while . ParExpression Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S159, ParExpression)        
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S54, _leftparen)            shift

State 75: V[Prototype, _leftbrace, _stringliteral] = goto(S31, 49)
I:   Literal -> _stringliteral .                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(111)

State 76: V[Prototype, _leftbrace, MethodCall2] = goto(S31, 100)
I:   MethodCall -> MethodCall2 .                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(114)

State 77: V[Prototype, _leftbrace, FieldDecl] = goto(S31, 55)
I:   FieldDeclList -> FieldDecl .                     FOLLOW={_bool,_not,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_int,_rightbrace,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} reduce(33)

State 78: V[Prototype, _leftbrace, QualifiedName] = goto(S31, 62)
I:   Name -> QualifiedName .                          FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(20)

State 79: V[Prototype, _leftbrace, Expression] = goto(S31, 92)
I:   Statement -> Expression . _semicolon             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S160, _semicolon)           shift

State 80: V[Prototype, _leftbrace, Primary] = goto(S31, 95)
I:   UnaryExpression -> Primary .                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(86)

State 81: V[Prototype, _leftbrace, _if] = goto(S31, 10)
I:   IfStatement -> _if . ParExpression Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S161, ParExpression)        
I:   IfStatement -> _if . ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S161, ParExpression)        
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S54, _leftparen)            shift

State 82: V[Prototype, _leftbrace, Name] = goto(S31, 60)
I:   Expression -> Name . IndexResolver _assignop Expression FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S121, IndexResolver)        
I:   Primary -> Name .                                FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(87)
I:   QualifiedName -> Name . _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S120, _period)              shift
I:   Primary -> Name . IndexResolver                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S121, IndexResolver)        
I:   Expression -> Name . _assignop Expression        FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S119, _assignop)            shift
     IndexResolver -> . _leftbracket Expression _rightbracket FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S118, _leftbracket)         shift
     IndexResolver -> . IndexResolver _leftbracket Expression _rightbracket FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S121, IndexResolver)        

State 83: V[Prototype, _leftbrace, StatementList] = goto(S31, 71)
I:   StatementList -> StatementList . Statement       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S90, Statement)             
I:   StatementListOpt -> StatementList . _rightbrace  FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S89, _rightbrace)           shift
     Statement -> . WhileStatement                    FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S65, WhileStatement)        
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S31, _leftbrace)            shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     IfStatement -> . _if ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Statement -> . _return ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S85, _return)               shift
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Statement -> . _println _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S60, _println)              shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Statement -> . _break _semicolon                 FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S59, _break)                shift
     IfStatement -> . _if ParExpression Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . Literal                             FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Statement -> . Expression _semicolon             FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S79, Expression)            
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     WhileStatement -> . _while ParExpression Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S74, _while)                shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     ForStatement -> . _for _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S73, _for)                  shift
     Statement -> . _semicolon                        FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S55, _semicolon)            shift
     Statement -> . Block                             FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S72, Block)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     Statement -> . IfStatement                       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S52, IfStatement)           
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     Statement -> . ForStatement                      FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S67, ForStatement)          

State 84: V[Prototype, _leftbrace, BinaryExpression] = goto(S31, 93)
I:   BinaryExpression -> BinaryExpression . InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S134, InfixOperator)        
I:   Expression -> BinaryExpression .                 FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} reduce(82)
     InfixOperator -> . _division                     FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S133, _division)            shift
     InfixOperator -> . _lessequal                    FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S132, _lessequal)           shift
     InfixOperator -> . _less                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S131, _less)                shift
     InfixOperator -> . _plus                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S130, _plus)                shift
     InfixOperator -> . _multiplication               FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S129, _multiplication)      shift
     InfixOperator -> . _minus                        FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S128, _minus)               shift
     InfixOperator -> . _or                           FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S127, _or)                  shift
     InfixOperator -> . _and                          FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S126, _and)                 shift
     InfixOperator -> . _greaterequal                 FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S125, _greaterequal)        shift
     InfixOperator -> . _greater                      FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S124, _greater)             shift
     InfixOperator -> . _notequal                     FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S123, _notequal)            shift
     InfixOperator -> . _equal                        FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S122, _equal)               shift

State 85: V[Prototype, _leftbrace, _return] = goto(S31, 17)
I:   Statement -> _return . ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S162, ReturnExpressionOpt)  
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     ReturnExpressionOpt -> . _semicolon              FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S163, _semicolon)           shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     ReturnExpressionOpt -> . Expression _semicolon   FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S164, Expression)           
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 86: V[Prototype, _leftbrace, UnaryExpression] = goto(S31, 94)
I:   BinaryExpression -> UnaryExpression .            FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(84)

State 87: V[Prototype, _leftbrace, _booleanliteral] = goto(S31, 46)
I:   Literal -> _booleanliteral .                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(113)

State 88: V[Prototype, _leftbrace, StatementList, _id] = goto(S83, 51)
I:   MethodCall -> _id . _period MethodCall2          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S92, _period)               shift
I:   MethodCall2 -> _id . _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S91, _leftparen)            shift
I:   SimpleName -> _id .                              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(21)
I:   MethodCall2 -> _id . _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S91, _leftparen)            shift

State 89: V[Prototype, _leftbrace, StatementList, _rightbrace] = goto(S83, 44)
I:   StatementListOpt -> StatementList _rightbrace .  FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} reduce(36)

State 90: V[Prototype, _leftbrace, StatementList, Statement] = goto(S83, 72)
I:   StatementList -> StatementList Statement .       FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(38)

State 91: V[Prototype, _leftbrace, _id, _leftparen] = goto(S49, 39)
I:   MethodCall2 -> _id _leftparen . _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S146, _rightparen)          shift
I:   MethodCall2 -> _id _leftparen . ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S145, ExpressionList)       
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     ExpressionList -> . ExpressionList _comma Expression FOLLOW={_comma,_rightparen}      goto(S145, ExpressionList)       
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_comma,_rightparen}      goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_comma,_rightparen}      goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     ExpressionList -> . Expression                   FOLLOW={_comma,_rightparen}      goto(S139, Expression)           
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_comma,_rightparen}      goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 92: V[Prototype, _leftbrace, _id, _period] = goto(S49, 38)
I:   MethodCall -> _id _period . MethodCall2          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S148, MethodCall2)          
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S147, _id)                  shift
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S147, _id)                  shift

State 93: V[Prototype, _leftbrace, _newarray, _leftparen] = goto(S48, 39)
I:   Primary -> _newarray _leftparen . _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S137, _integerliteral)      shift
I:   Primary -> _newarray _leftparen . _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S137, _integerliteral)      shift
I:   Primary -> _newarray _leftparen . _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S137, _integerliteral)      shift

State 94: V[Prototype, _leftbrace, FieldDeclList, FieldDecl] = goto(S64, 55)
I:   FieldDeclList -> FieldDeclList FieldDecl .       FOLLOW={_not,_bool,_break,_semicolon,_double,_leftparen,_for,_if,_leftbrace,_rightbrace,_int,_newarray,_booleanliteral,_println,_integerliteral,_readln,_doubleliteral,_return,_stringliteral,_string,_id,_while,_minus} reduce(34)

State 95: V[Prototype, _leftbrace, FieldDeclList, StatementListOpt] = goto(S64, 70)
I:   FieldDeclListOpt -> FieldDeclList StatementListOpt . FOLLOW={_eof,_bool,_break,_class,_double,_else,_for,_if,_int,_interface,_newarray,_println,_readln,_return,_string,_void,_while,_minus,_not,_semicolon,_leftparen,_leftbrace,_rightbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} reduce(32)

State 96: V[_interface, _id, _leftbrace, PrototypeListOpt] = goto(S32, 89)
I:   InterfaceDecl -> _interface _id _leftbrace PrototypeListOpt . FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(74)

State 97: V[_interface, _id, _leftbrace, PrototypeList] = goto(S32, 90)
I:   PrototypeList -> PrototypeList . PrototypeDecl   FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} goto(S165, PrototypeDecl)        
I:   PrototypeListOpt -> PrototypeList . _rightbrace  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S166, _rightbrace)          shift
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_leftparen}              goto(S3, _id)                    shift
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     Prototype -> . TypeAndIdentifier _leftparen ArgumentListOpt FOLLOW={_semicolon}              goto(S98, TypeAndIdentifier)     
     Prototype -> . _void _id _leftparen ArgumentListOpt FOLLOW={_semicolon}              goto(S6, _void)                  shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_leftparen}              goto(S2, SimpleType)             
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     PrototypeDecl -> . Prototype _semicolon          FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} goto(S104, Prototype)            
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_leftparen}              goto(S3, _id)                    shift

State 98: V[_interface, _id, _leftbrace, TypeAndIdentifier] = goto(S32, 56)
I:   Prototype -> TypeAndIdentifier . _leftparen ArgumentListOpt FOLLOW={_semicolon}              goto(S22, _leftparen)            shift

State 99: V[TypeAndIdentifier, _leftparen, ArgumentList, _comma] = goto(S38, 37)
I:   ArgumentList -> ArgumentList _comma . TypeAndIdentifier FOLLOW={_comma,_rightparen}      goto(S167, TypeAndIdentifier)    
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_comma,_rightparen}      goto(S3, _id)                    shift
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_comma,_rightparen}      goto(S2, SimpleType)             
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_comma,_rightparen}      goto(S3, _id)                    shift

State 100: V[TypeAndIdentifier, _leftparen, ArgumentList, _rightparen] = goto(S38, 40)
I:   ArgumentListOpt -> ArgumentList _rightparen .    FOLLOW={_semicolon,_leftbrace}   reduce(27)

State 101: V[_void, _id, _leftparen, ArgumentListOpt] = goto(S46, 65)
I:   Prototype -> _void _id _leftparen ArgumentListOpt . FOLLOW={_semicolon,_leftbrace}   reduce(25)

State 102: V[_interface, _id, _leftbrace, _rightbrace] = goto(S32, 44)
I:   PrototypeListOpt -> _rightbrace .                FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(75)

State 103: V[_interface, _id, _leftbrace, PrototypeDecl] = goto(S32, 91)
I:   PrototypeList -> PrototypeDecl .                 FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} reduce(77)

State 104: V[_interface, _id, _leftbrace, Prototype] = goto(S32, 64)
I:   PrototypeDecl -> Prototype . _semicolon          FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} goto(S168, _semicolon)           shift

State 105: V[_id, ArrayType, _leftbracket, _rightbracket] = goto(S35, 42)
I:   ArrayType -> ArrayType _leftbracket _rightbracket . FOLLOW={_id,_rightparen,_leftbracket} reduce(13)

State 106: V[_class, _id, _leftbrace, ClassBodyOpt] = goto(S40, 85)
I:   Interfaces -> _leftbrace ClassBodyOpt .          FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(64)

State 107: V[_class, _id, _leftbrace, Member] = goto(S40, 87)
I:   MemberList -> Member .                           FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} reduce(70)

State 108: V[_class, _id, _leftbrace, FieldDecl] = goto(S40, 55)
I:   Member -> FieldDecl .                            FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} reduce(72)

State 109: V[_class, _id, _leftbrace, MemberList] = goto(S40, 86)
I:   MemberList -> MemberList . Member                FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} goto(S169, Member)               
I:   ClassBodyOpt -> MemberList . _rightbrace         FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S170, _rightbrace)          shift
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     Member -> . FieldDecl                            FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} goto(S108, FieldDecl)            
     Prototype -> . TypeAndIdentifier _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S5, TypeAndIdentifier)      
     Prototype -> . _void _id _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S6, _void)                  shift
     FieldDecl -> . TypeAndIdentifier _semicolon      FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} goto(S5, TypeAndIdentifier)      
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     MethodDecl -> . Prototype Block                  FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} goto(S9, Prototype)              
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_semicolon,_leftparen}   goto(S2, SimpleType)             
     Member -> . MethodDecl                           FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} goto(S111, MethodDecl)           
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 110: V[_class, _id, _leftbrace, _rightbrace] = goto(S40, 44)
I:   ClassBodyOpt -> _rightbrace .                    FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(68)

State 111: V[_class, _id, _leftbrace, MethodDecl] = goto(S40, 63)
I:   Member -> MethodDecl .                           FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} reduce(73)

State 112: V[_class, _id, _implements, IdentifierList] = goto(S41, 84)
I:   IdentifierList -> IdentifierList . _comma _id    FOLLOW={_comma,_leftbrace}       goto(S171, _comma)               shift
I:   Interfaces -> _implements IdentifierList . _leftbrace ClassBodyOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S172, _leftbrace)           shift

State 113: V[_class, _id, _implements, _id] = goto(S41, 51)
I:   IdentifierList -> _id .                          FOLLOW={_comma,_leftbrace}       reduce(66)

State 114: V[_class, _id, _extends, _id] = goto(S42, 51)
I:   Super -> _extends _id . Interfaces               FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S173, Interfaces)           
     Interfaces -> . _leftbrace ClassBodyOpt          FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S40, _leftbrace)            shift
     Interfaces -> . _implements IdentifierList _leftbrace ClassBodyOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S41, _implements)           shift

State 115: V[Prototype, _leftbrace, PrefixOperator, UnaryExpression] = goto(S51, 94)
I:   UnaryExpression -> PrefixOperator UnaryExpression . FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(85)

State 116: V[Prototype, _leftbrace, PrefixOperator, Name] = goto(S51, 60)
I:   Primary -> Name .                                FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(87)
I:   QualifiedName -> Name . _period _id              FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S120, _period)              shift
I:   Primary -> Name . IndexResolver                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S155, IndexResolver)        
     IndexResolver -> . _leftbracket Expression _rightbracket FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S118, _leftbracket)         shift
     IndexResolver -> . IndexResolver _leftbracket Expression _rightbracket FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S155, IndexResolver)        

State 117: V[Prototype, _leftbrace, _leftparen, Expression] = goto(S54, 92)
I:   ParExpression -> _leftparen Expression . _rightparen FOLLOW={_break,_for,_if,_newarray,_println,_readln,_return,_while,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal,_and,_or,_not,_semicolon,_comma,_leftparen,_rightparen,_rightbracket,_leftbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} goto(S138, _rightparen)          shift

State 118: V[Prototype, _leftbrace, Name, _leftbracket] = goto(S82, 41)
I:   IndexResolver -> _leftbracket . Expression _rightbracket FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S154, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_rightbracket}           goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_rightbracket}           goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_rightbracket}           goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 119: V[Prototype, _leftbrace, Name, _assignop] = goto(S82, 35)
I:   Expression -> Name _assignop . Expression        FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S140, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 120: V[Prototype, _leftbrace, Name, _period] = goto(S82, 38)
I:   QualifiedName -> Name _period . _id              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S141, _id)                  shift

State 121: V[Prototype, _leftbrace, Name, IndexResolver] = goto(S82, 101)
I:   Expression -> Name IndexResolver . _assignop Expression FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S143, _assignop)            shift
I:   Primary -> Name IndexResolver .                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(88)
I:   IndexResolver -> IndexResolver . _leftbracket Expression _rightbracket FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S142, _leftbracket)         shift

State 122: V[Prototype, _leftbrace, BinaryExpression, _equal] = goto(S84, 30)
I:   InfixOperator -> _equal .                        FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(100)

State 123: V[Prototype, _leftbrace, BinaryExpression, _notequal] = goto(S84, 31)
I:   InfixOperator -> _notequal .                     FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(101)

State 124: V[Prototype, _leftbrace, BinaryExpression, _greater] = goto(S84, 28)
I:   InfixOperator -> _greater .                      FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(103)

State 125: V[Prototype, _leftbrace, BinaryExpression, _greaterequal] = goto(S84, 29)
I:   InfixOperator -> _greaterequal .                 FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(105)

State 126: V[Prototype, _leftbrace, BinaryExpression, _and] = goto(S84, 32)
I:   InfixOperator -> _and .                          FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(99)

State 127: V[Prototype, _leftbrace, BinaryExpression, _or] = goto(S84, 33)
I:   InfixOperator -> _or .                           FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(98)

State 128: V[Prototype, _leftbrace, BinaryExpression, _minus] = goto(S84, 22)
I:   InfixOperator -> _minus .                        FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(107)

State 129: V[Prototype, _leftbrace, BinaryExpression, _multiplication] = goto(S84, 23)
I:   InfixOperator -> _multiplication .               FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(108)

State 130: V[Prototype, _leftbrace, BinaryExpression, _plus] = goto(S84, 21)
I:   InfixOperator -> _plus .                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(106)

State 131: V[Prototype, _leftbrace, BinaryExpression, _less] = goto(S84, 26)
I:   InfixOperator -> _less .                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(102)

State 132: V[Prototype, _leftbrace, BinaryExpression, _lessequal] = goto(S84, 27)
I:   InfixOperator -> _lessequal .                    FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(104)

State 133: V[Prototype, _leftbrace, BinaryExpression, _division] = goto(S84, 24)
I:   InfixOperator -> _division .                     FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} reduce(109)

State 134: V[Prototype, _leftbrace, BinaryExpression, InfixOperator] = goto(S84, 97)
I:   BinaryExpression -> BinaryExpression InfixOperator . UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S151, UnaryExpression)      
     Name -> . SimpleName                             FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S116, Name)                 
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S116, Name)                 
     Name -> . QualifiedName                          FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S116, Name)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     SimpleName -> . _id                              FOLLOW={_and,_or,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift

State 135: V[Prototype, _leftbrace, _readln, _leftparen] = goto(S70, 39)
I:   Primary -> _readln _leftparen . _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S136, _rightparen)          shift

State 136: V[Prototype, _leftbrace, _readln, _leftparen, _rightparen] = goto(S135, 40)
I:   Primary -> _readln _leftparen _rightparen .      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(92)

State 137: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral] = goto(S93, 47)
I:   Primary -> _newarray _leftparen _integerliteral . _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S144, _comma)               shift
I:   Primary -> _newarray _leftparen _integerliteral . _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S144, _comma)               shift
I:   Primary -> _newarray _leftparen _integerliteral . _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S144, _comma)               shift

State 138: V[Prototype, _leftbrace, _leftparen, Expression, _rightparen] = goto(S117, 40)
I:   ParExpression -> _leftparen Expression _rightparen . FOLLOW={_break,_for,_if,_newarray,_println,_readln,_return,_while,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal,_and,_or,_not,_semicolon,_comma,_leftparen,_rightparen,_rightbracket,_leftbrace,_booleanliteral,_integerliteral,_doubleliteral,_stringliteral,_id} reduce(50)

State 139: V[Prototype, _leftbrace, _id, _leftparen, Expression] = goto(S91, 92)
I:   ExpressionList -> Expression .                   FOLLOW={_comma,_rightparen}      reduce(59)

State 140: V[Prototype, _leftbrace, Name, _assignop, Expression] = goto(S119, 92)
I:   Expression -> Name _assignop Expression .        FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} reduce(80)

State 141: V[Prototype, _leftbrace, Name, _period, _id] = goto(S120, 51)
I:   QualifiedName -> Name _period _id .              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(22)

State 142: V[Prototype, _leftbrace, Name, IndexResolver, _leftbracket] = goto(S121, 41)
I:   IndexResolver -> IndexResolver _leftbracket . Expression _rightbracket FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S152, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_rightbracket}           goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_rightbracket}           goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_rightbracket}           goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 143: V[Prototype, _leftbrace, Name, IndexResolver, _assignop] = goto(S121, 35)
I:   Expression -> Name IndexResolver _assignop . Expression FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S153, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_comma,_period,_rightparen,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 144: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma] = goto(S137, 37)
I:   Primary -> _newarray _leftparen _integerliteral _comma . SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S150, SimpleType)           
I:   Primary -> _newarray _leftparen _integerliteral _comma . _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S149, _id)                  shift
I:   Primary -> _newarray _leftparen _integerliteral _comma . _id _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S149, _id)                  shift
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_rightparen,_leftbracket} goto(S150, SimpleType)           
     BasicType -> . _int                              FOLLOW={_rightparen,_leftbracket} goto(S14, _int)                  shift
     SimpleType -> . BasicType                        FOLLOW={_rightparen,_leftbracket} goto(S15, BasicType)             
     BasicType -> . _double                           FOLLOW={_rightparen,_leftbracket} goto(S8, _double)                shift
     BasicType -> . _bool                             FOLLOW={_rightparen,_leftbracket} goto(S10, _bool)                 shift
     BasicType -> . _string                           FOLLOW={_rightparen,_leftbracket} goto(S18, _string)               shift

State 145: V[Prototype, _leftbrace, _id, _leftparen, ExpressionList] = goto(S91, 80)
I:   ExpressionList -> ExpressionList . _comma Expression FOLLOW={_comma,_rightparen}      goto(S174, _comma)               shift
I:   MethodCall2 -> _id _leftparen ExpressionList . _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S175, _rightparen)          shift

State 146: V[Prototype, _leftbrace, _id, _leftparen, _rightparen] = goto(S91, 40)
I:   MethodCall2 -> _id _leftparen _rightparen .      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(116)

State 147: V[Prototype, _leftbrace, _id, _period, _id] = goto(S92, 51)
I:   MethodCall2 -> _id . _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S91, _leftparen)            shift
I:   MethodCall2 -> _id . _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S91, _leftparen)            shift

State 148: V[Prototype, _leftbrace, _id, _period, MethodCall2] = goto(S92, 100)
I:   MethodCall -> _id _period MethodCall2 .          FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(115)

State 149: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, _id] = goto(S144, 51)
I:   Primary -> _newarray _leftparen _integerliteral _comma _id . ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S176, ArrayType)            
I:   Primary -> _newarray _leftparen _integerliteral _comma _id . _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S177, _rightparen)          shift
     ArrayType -> . ArrayType _leftbracket _rightbracket FOLLOW={_rightparen,_leftbracket} goto(S176, ArrayType)            
     ArrayType -> . _leftbracket _rightbracket        FOLLOW={_rightparen,_leftbracket} goto(S28, _leftbracket)          shift

State 150: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, SimpleType] = goto(S144, 57)
I:   SimpleType -> SimpleType . _leftbracket _rightbracket FOLLOW={_rightparen,_leftbracket} goto(S24, _leftbracket)          shift
I:   Primary -> _newarray _leftparen _integerliteral _comma SimpleType . _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S178, _rightparen)          shift

State 151: V[Prototype, _leftbrace, BinaryExpression, InfixOperator, UnaryExpression] = goto(S134, 94)
I:   BinaryExpression -> BinaryExpression InfixOperator UnaryExpression . FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(83)

State 152: V[Prototype, _leftbrace, Name, IndexResolver, _leftbracket, Expression] = goto(S142, 92)
I:   IndexResolver -> IndexResolver _leftbracket Expression . _rightbracket FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S179, _rightbracket)        shift

State 153: V[Prototype, _leftbrace, Name, IndexResolver, _assignop, Expression] = goto(S143, 92)
I:   Expression -> Name IndexResolver _assignop Expression . FOLLOW={_semicolon,_comma,_rightparen,_rightbracket} reduce(81)

State 154: V[Prototype, _leftbrace, Name, _leftbracket, Expression] = goto(S118, 92)
I:   IndexResolver -> _leftbracket Expression . _rightbracket FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S180, _rightbracket)        shift

State 155: V[Prototype, _leftbrace, PrefixOperator, Name, IndexResolver] = goto(S116, 101)
I:   Primary -> Name IndexResolver .                  FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(88)
I:   IndexResolver -> IndexResolver . _leftbracket Expression _rightbracket FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S142, _leftbracket)         shift

State 156: V[Prototype, _leftbrace, _break, _semicolon] = goto(S59, 36)
I:   Statement -> _break _semicolon .                 FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(41)

State 157: V[Prototype, _leftbrace, _println, _leftparen] = goto(S60, 39)
I:   Statement -> _println _leftparen . ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S181, ExpressionList)       
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_comma,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     ExpressionList -> . ExpressionList _comma Expression FOLLOW={_comma,_rightparen}      goto(S181, ExpressionList)       
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_comma,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_comma,_rightparen}      goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_comma,_rightparen}      goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_comma,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     ExpressionList -> . Expression                   FOLLOW={_comma,_rightparen}      goto(S139, Expression)           
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_comma,_rightparen}      goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_comma,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_comma,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 158: V[Prototype, _leftbrace, _for, _leftparen] = goto(S73, 39)
I:   ForStatement -> _for _leftparen . ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S182, ForControl)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     ForControl1 -> . _semicolon Expression _semicolon Expression _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S183, _semicolon)           shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     ForControl -> . Expression ForControl1           FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S184, Expression)           
     ForControl1 -> . _semicolon Expression _semicolon _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S183, _semicolon)           shift
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     ForControl -> . ForControl1                      FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S185, ForControl1)          
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 159: V[Prototype, _leftbrace, _while, ParExpression] = goto(S74, 74)
I:   WhileStatement -> _while ParExpression . Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S186, Statement)            
     Statement -> . WhileStatement                    FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S65, WhileStatement)        
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S31, _leftbrace)            shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     IfStatement -> . _if ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Statement -> . _return ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S85, _return)               shift
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Statement -> . _println _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S60, _println)              shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Statement -> . _break _semicolon                 FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S59, _break)                shift
     IfStatement -> . _if ParExpression Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Statement -> . Expression _semicolon             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S79, Expression)            
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     WhileStatement -> . _while ParExpression Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S74, _while)                shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     ForStatement -> . _for _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S73, _for)                  shift
     Statement -> . _semicolon                        FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S55, _semicolon)            shift
     Statement -> . Block                             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S72, Block)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     Statement -> . IfStatement                       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S52, IfStatement)           
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     Statement -> . ForStatement                      FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S67, ForStatement)          

State 160: V[Prototype, _leftbrace, Expression, _semicolon] = goto(S79, 36)
I:   Statement -> Expression _semicolon .             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(43)

State 161: V[Prototype, _leftbrace, _if, ParExpression] = goto(S81, 74)
I:   IfStatement -> _if ParExpression . Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S187, Statement)            
I:   IfStatement -> _if ParExpression . Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S187, Statement)            
     Statement -> . WhileStatement                    FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S65, WhileStatement)        
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S31, _leftbrace)            shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     IfStatement -> . _if ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Statement -> . _return ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S85, _return)               shift
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Statement -> . _println _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S60, _println)              shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Statement -> . _break _semicolon                 FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S59, _break)                shift
     IfStatement -> . _if ParExpression Statement     FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Statement -> . Expression _semicolon             FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S79, Expression)            
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     WhileStatement -> . _while ParExpression Statement FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S74, _while)                shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     ForStatement -> . _for _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S73, _for)                  shift
     Statement -> . _semicolon                        FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S55, _semicolon)            shift
     Statement -> . Block                             FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S72, Block)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     Statement -> . IfStatement                       FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S52, IfStatement)           
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     Statement -> . ForStatement                      FOLLOW={_not,_break,_semicolon,_else,_leftparen,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S67, ForStatement)          

State 162: V[Prototype, _leftbrace, _return, ReturnExpressionOpt] = goto(S85, 79)
I:   Statement -> _return ReturnExpressionOpt .       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(46)

State 163: V[Prototype, _leftbrace, _return, _semicolon] = goto(S85, 36)
I:   ReturnExpressionOpt -> _semicolon .              FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(57)

State 164: V[Prototype, _leftbrace, _return, Expression] = goto(S85, 92)
I:   ReturnExpressionOpt -> Expression . _semicolon   FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S189, _semicolon)           shift

State 165: V[_interface, _id, _leftbrace, PrototypeList, PrototypeDecl] = goto(S97, 91)
I:   PrototypeList -> PrototypeList PrototypeDecl .   FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} reduce(78)

State 166: V[_interface, _id, _leftbrace, PrototypeList, _rightbrace] = goto(S97, 44)
I:   PrototypeListOpt -> PrototypeList _rightbrace .  FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(76)

State 167: V[TypeAndIdentifier, _leftparen, ArgumentList, _comma, TypeAndIdentifier] = goto(S99, 56)
I:   ArgumentList -> ArgumentList _comma TypeAndIdentifier . FOLLOW={_comma,_rightparen}      reduce(29)

State 168: V[_interface, _id, _leftbrace, Prototype, _semicolon] = goto(S104, 36)
I:   PrototypeDecl -> Prototype _semicolon .          FOLLOW={_bool,_string,_void,_id,_double,_rightbrace,_int} reduce(79)

State 169: V[_class, _id, _leftbrace, MemberList, Member] = goto(S109, 87)
I:   MemberList -> MemberList Member .                FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} reduce(71)

State 170: V[_class, _id, _leftbrace, MemberList, _rightbrace] = goto(S109, 44)
I:   ClassBodyOpt -> MemberList _rightbrace .         FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(69)

State 171: V[_class, _id, _implements, IdentifierList, _comma] = goto(S112, 37)
I:   IdentifierList -> IdentifierList _comma . _id    FOLLOW={_comma,_leftbrace}       goto(S192, _id)                  shift

State 172: V[_class, _id, _implements, IdentifierList, _leftbrace] = goto(S112, 43)
I:   Interfaces -> _implements IdentifierList _leftbrace . ClassBodyOpt FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S193, ClassBodyOpt)         
     MemberList -> . Member                           FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S107, Member)               
     SimpleType -> . SimpleType _leftbracket _rightbracket FOLLOW={_id,_leftbracket}        goto(S2, SimpleType)             
     TypeAndIdentifier -> . _id _id                   FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     Member -> . FieldDecl                            FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S108, FieldDecl)            
     Prototype -> . TypeAndIdentifier _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S5, TypeAndIdentifier)      
     Prototype -> . _void _id _leftparen ArgumentListOpt FOLLOW={_leftbrace}              goto(S6, _void)                  shift
     FieldDecl -> . TypeAndIdentifier _semicolon      FOLLOW={_bool,_string,_id,_void,_double,_int} goto(S5, TypeAndIdentifier)      
     BasicType -> . _double                           FOLLOW={_id,_leftbracket}        goto(S8, _double)                shift
     MethodDecl -> . Prototype Block                  FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S9, Prototype)              
     ClassBodyOpt -> . MemberList _rightbrace         FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S109, MemberList)           
     BasicType -> . _bool                             FOLLOW={_id,_leftbracket}        goto(S10, _bool)                 shift
     TypeAndIdentifier -> . _id ArrayType _id         FOLLOW={_semicolon,_leftparen}   goto(S3, _id)                    shift
     BasicType -> . _int                              FOLLOW={_id,_leftbracket}        goto(S14, _int)                  shift
     ClassBodyOpt -> . _rightbrace                    FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} goto(S110, _rightbrace)          shift
     SimpleType -> . BasicType                        FOLLOW={_id,_leftbracket}        goto(S15, BasicType)             
     TypeAndIdentifier -> . SimpleType _id            FOLLOW={_semicolon,_leftparen}   goto(S2, SimpleType)             
     MemberList -> . MemberList Member                FOLLOW={_bool,_string,_id,_void,_double,_rightbrace,_int} goto(S109, MemberList)           
     Member -> . MethodDecl                           FOLLOW={_bool,_string,_id,_void,_double,_int,_rightbrace} goto(S111, MethodDecl)           
     BasicType -> . _string                           FOLLOW={_id,_leftbracket}        goto(S18, _string)               shift

State 173: V[_class, _id, _extends, _id, Interfaces] = goto(S114, 83)
I:   Super -> _extends _id Interfaces .               FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(63)

State 174: V[Prototype, _leftbrace, _id, _leftparen, ExpressionList, _comma] = goto(S145, 37)
I:   ExpressionList -> ExpressionList _comma . Expression FOLLOW={_comma,_rightparen}      goto(S194, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_comma,_rightparen}      goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_comma,_rightparen}      goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_comma,_rightparen}      goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_comma,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 175: V[Prototype, _leftbrace, _id, _leftparen, ExpressionList, _rightparen] = goto(S145, 40)
I:   MethodCall2 -> _id _leftparen ExpressionList _rightparen . FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(117)

State 176: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, _id, ArrayType] = goto(S149, 58)
I:   ArrayType -> ArrayType . _leftbracket _rightbracket FOLLOW={_rightparen,_leftbracket} goto(S35, _leftbracket)          shift
I:   Primary -> _newarray _leftparen _integerliteral _comma _id ArrayType . _rightparen FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S195, _rightparen)          shift

State 177: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, _id, _rightparen] = goto(S149, 40)
I:   Primary -> _newarray _leftparen _integerliteral _comma _id _rightparen . FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(94)

State 178: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, SimpleType, _rightparen] = goto(S150, 40)
I:   Primary -> _newarray _leftparen _integerliteral _comma SimpleType _rightparen . FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(93)

State 179: V[Prototype, _leftbrace, Name, IndexResolver, _leftbracket, Expression, _rightbracket] = goto(S152, 42)
I:   IndexResolver -> IndexResolver _leftbracket Expression _rightbracket . FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(118)

State 180: V[Prototype, _leftbrace, Name, _leftbracket, Expression, _rightbracket] = goto(S154, 42)
I:   IndexResolver -> _leftbracket Expression _rightbracket . FOLLOW={_and,_or,_assignop,_semicolon,_comma,_rightparen,_leftbracket,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(119)

State 181: V[Prototype, _leftbrace, _println, _leftparen, ExpressionList] = goto(S157, 80)
I:   ExpressionList -> ExpressionList . _comma Expression FOLLOW={_comma,_rightparen}      goto(S174, _comma)               shift
I:   Statement -> _println _leftparen ExpressionList . _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S188, _rightparen)          shift

State 182: V[Prototype, _leftbrace, _for, _leftparen, ForControl] = goto(S158, 76)
I:   ForStatement -> _for _leftparen ForControl . Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S190, Statement)            
     Statement -> . WhileStatement                    FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S65, WhileStatement)        
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S31, _leftbrace)            shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     IfStatement -> . _if ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Statement -> . _return ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S85, _return)               shift
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Statement -> . _println _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S60, _println)              shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Statement -> . _break _semicolon                 FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S59, _break)                shift
     IfStatement -> . _if ParExpression Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . Literal                             FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Statement -> . Expression _semicolon             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S79, Expression)            
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     WhileStatement -> . _while ParExpression Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S74, _while)                shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     ForStatement -> . _for _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S73, _for)                  shift
     Statement -> . _semicolon                        FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S55, _semicolon)            shift
     Statement -> . Block                             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S72, Block)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     Statement -> . IfStatement                       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S52, IfStatement)           
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_semicolon,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     Statement -> . ForStatement                      FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S67, ForStatement)          

State 183: V[Prototype, _leftbrace, _for, _leftparen, _semicolon] = goto(S158, 36)
I:   ForControl1 -> _semicolon . Expression _semicolon _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S196, Expression)           
I:   ForControl1 -> _semicolon . Expression _semicolon Expression _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S196, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 184: V[Prototype, _leftbrace, _for, _leftparen, Expression] = goto(S158, 92)
I:   ForControl -> Expression . ForControl1           FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S197, ForControl1)          
     ForControl1 -> . _semicolon Expression _semicolon _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S183, _semicolon)           shift
     ForControl1 -> . _semicolon Expression _semicolon Expression _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S183, _semicolon)           shift

State 185: V[Prototype, _leftbrace, _for, _leftparen, ForControl1] = goto(S158, 77)
I:   ForControl -> ForControl1 .                      FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(52)

State 186: V[Prototype, _leftbrace, _while, ParExpression, Statement] = goto(S159, 72)
I:   WhileStatement -> _while ParExpression Statement . FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(56)

State 187: V[Prototype, _leftbrace, _if, ParExpression, Statement] = goto(S161, 72)
I:   IfStatement -> _if ParExpression Statement . _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S191, _else)                shift
I:   IfStatement -> _if ParExpression Statement .     FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(48)

State 188: V[Prototype, _leftbrace, _println, _leftparen, ExpressionList, _rightparen] = goto(S181, 40)
I:   Statement -> _println _leftparen ExpressionList _rightparen . _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S198, _semicolon)           shift

State 189: V[Prototype, _leftbrace, _return, Expression, _semicolon] = goto(S164, 36)
I:   ReturnExpressionOpt -> Expression _semicolon .   FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(58)

State 190: V[Prototype, _leftbrace, _for, _leftparen, ForControl, Statement] = goto(S182, 72)
I:   ForStatement -> _for _leftparen ForControl Statement . FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(51)

State 191: V[Prototype, _leftbrace, _if, ParExpression, Statement, _else] = goto(S187, 7)
I:   IfStatement -> _if ParExpression Statement _else . Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S199, Statement)            
     Statement -> . WhileStatement                    FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S65, WhileStatement)        
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     Block -> . _leftbrace FieldDeclListOpt           FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S31, _leftbrace)            shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     IfStatement -> . _if ParExpression Statement _else Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Statement -> . _return ReturnExpressionOpt       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S85, _return)               shift
     Expression -> . BinaryExpression                 FOLLOW={_semicolon}              goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Statement -> . _println _leftparen ExpressionList _rightparen _semicolon FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S60, _println)              shift
     Expression -> . Name _assignop Expression        FOLLOW={_semicolon}              goto(S82, Name)                  
     Statement -> . _break _semicolon                 FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S59, _break)                shift
     IfStatement -> . _if ParExpression Statement     FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S81, _if)                   shift
     Primary -> . Literal                             FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Statement -> . Expression _semicolon             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S79, Expression)            
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     WhileStatement -> . _while ParExpression Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S74, _while)                shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_semicolon}              goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     ForStatement -> . _for _leftparen ForControl Statement FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S73, _for)                  shift
     Statement -> . _semicolon                        FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S55, _semicolon)            shift
     Statement -> . Block                             FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S72, Block)                 
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     Statement -> . IfStatement                       FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S52, IfStatement)           
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_semicolon,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        
     Statement -> . ForStatement                      FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S67, ForStatement)          

State 192: V[_class, _id, _implements, IdentifierList, _comma, _id] = goto(S171, 51)
I:   IdentifierList -> IdentifierList _comma _id .    FOLLOW={_comma,_leftbrace}       reduce(67)

State 193: V[_class, _id, _implements, IdentifierList, _leftbrace, ClassBodyOpt] = goto(S172, 85)
I:   Interfaces -> _implements IdentifierList _leftbrace ClassBodyOpt . FOLLOW={_eof,_bool,_string,_id,_void,_class,_double,_int,_interface} reduce(65)

State 194: V[Prototype, _leftbrace, _id, _leftparen, ExpressionList, _comma, Expression] = goto(S174, 92)
I:   ExpressionList -> ExpressionList _comma Expression . FOLLOW={_comma,_rightparen}      reduce(60)

State 195: V[Prototype, _leftbrace, _newarray, _leftparen, _integerliteral, _comma, _id, ArrayType, _rightparen] = goto(S176, 40)
I:   Primary -> _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen . FOLLOW={_and,_or,_semicolon,_comma,_rightparen,_rightbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} reduce(95)

State 196: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression] = goto(S183, 92)
I:   ForControl1 -> _semicolon Expression . _semicolon _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S200, _semicolon)           shift
I:   ForControl1 -> _semicolon Expression . _semicolon Expression _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S200, _semicolon)           shift

State 197: V[Prototype, _leftbrace, _for, _leftparen, Expression, ForControl1] = goto(S184, 77)
I:   ForControl -> Expression ForControl1 .           FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(53)

State 198: V[Prototype, _leftbrace, _println, _leftparen, ExpressionList, _rightparen, _semicolon] = goto(S188, 36)
I:   Statement -> _println _leftparen ExpressionList _rightparen _semicolon . FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(47)

State 199: V[Prototype, _leftbrace, _if, ParExpression, Statement, _else, Statement] = goto(S191, 72)
I:   IfStatement -> _if ParExpression Statement _else Statement . FOLLOW={_not,_break,_semicolon,_leftparen,_else,_for,_if,_leftbrace,_rightbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(49)

State 200: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon] = goto(S196, 36)
I:   ForControl1 -> _semicolon Expression _semicolon . _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S201, _rightparen)          shift
I:   ForControl1 -> _semicolon Expression _semicolon . Expression _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S202, Expression)           
     Name -> . SimpleName                             FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S63, SimpleName)            
     Primary -> . ParExpression                       FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S62, ParExpression)         
     Primary -> . _newarray _leftparen _integerliteral _comma _id _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     MethodCall2 -> . _id _leftparen ExpressionList _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Literal -> . _doubleliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S61, _doubleliteral)        shift
     QualifiedName -> . Name _period _id              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Primary -> . _newarray _leftparen _integerliteral _comma SimpleType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     Literal -> . _booleanliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S87, _booleanliteral)       shift
     Primary -> . _newarray _leftparen _integerliteral _comma _id ArrayType _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S48, _newarray)             shift
     BinaryExpression -> . UnaryExpression            FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S86, UnaryExpression)       
     Expression -> . BinaryExpression                 FOLLOW={_rightparen}             goto(S84, BinaryExpression)      
     MethodCall -> . _id _period MethodCall2          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Expression -> . Name _assignop Expression        FOLLOW={_rightparen}             goto(S82, Name)                  
     Primary -> . Literal                             FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S57, Literal)               
     UnaryExpression -> . Primary                     FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S80, Primary)               
     Primary -> . Name IndexResolver                  FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     Name -> . QualifiedName                          FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S78, QualifiedName)         
     MethodCall -> . MethodCall2                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S76, MethodCall2)           
     Literal -> . _integerliteral                     FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S56, _integerliteral)       shift
     Literal -> . _stringliteral                      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S75, _stringliteral)        shift
     Expression -> . Name IndexResolver _assignop Expression FOLLOW={_rightparen}             goto(S82, Name)                  
     MethodCall2 -> . _id _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     Primary -> . Name                                FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S82, Name)                  
     PrefixOperator -> . _minus                       FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S71, _minus)                shift
     ParExpression -> . _leftparen Expression _rightparen FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S54, _leftparen)            shift
     Primary -> . _readln _leftparen _rightparen      FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S70, _readln)               shift
     PrefixOperator -> . _not                         FOLLOW={_readln,_doubleliteral,_stringliteral,_not,_id,_minus,_leftparen,_newarray,_booleanliteral,_integerliteral} goto(S69, _not)                  shift
     Primary -> . MethodCall                          FOLLOW={_and,_or,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S68, MethodCall)            
     SimpleName -> . _id                              FOLLOW={_and,_or,_assignop,_period,_leftbracket,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S88, _id)                   shift
     BinaryExpression -> . BinaryExpression InfixOperator UnaryExpression FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S84, BinaryExpression)      
     UnaryExpression -> . PrefixOperator UnaryExpression FOLLOW={_and,_or,_rightparen,_plus,_minus,_multiplication,_division,_less,_lessequal,_greater,_greaterequal,_equal,_notequal} goto(S51, PrefixOperator)        

State 201: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon, _rightparen] = goto(S200, 40)
I:   ForControl1 -> _semicolon Expression _semicolon _rightparen . FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(54)

State 202: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon, Expression] = goto(S200, 92)
I:   ForControl1 -> _semicolon Expression _semicolon Expression . _rightparen FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} goto(S203, _rightparen)          shift

State 203: V[Prototype, _leftbrace, _for, _leftparen, _semicolon, Expression, _semicolon, Expression, _rightparen] = goto(S202, 40)
I:   ForControl1 -> _semicolon Expression _semicolon Expression _rightparen . FOLLOW={_not,_break,_semicolon,_leftparen,_for,_if,_leftbrace,_newarray,_booleanliteral,_integerliteral,_println,_readln,_doubleliteral,_stringliteral,_return,_id,_while,_minus} reduce(55)

